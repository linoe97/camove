
Direction_uart_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043cc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046bc  080046bc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c4  080046c4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080046cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001e4  080048b0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  080048b0  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da0b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000207d  00000000  00000000  0002dc1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  0002fca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  00030940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022732  00000000  00000000  000314b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aefe  00000000  00000000  00053bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf91a  00000000  00000000  0005eae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012e402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003654  00000000  00000000  0012e480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001e4 	.word	0x200001e4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004578 	.word	0x08004578

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001e8 	.word	0x200001e8
 8000200:	08004578 	.word	0x08004578

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_DMA_Init+0x3c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <MX_DMA_Init+0x3c>)
 8000514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_DMA_Init+0x3c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	2010      	movs	r0, #16
 800052c:	f000 fdc7 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000530:	2010      	movs	r0, #16
 8000532:	f000 fde0 	bl	80010f6 <HAL_NVIC_EnableIRQ>

}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800

08000544 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
 800055e:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <MX_GPIO_Init+0xd0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a2c      	ldr	r2, [pc, #176]	; (8000614 <MX_GPIO_Init+0xd0>)
 8000564:	f043 0304 	orr.w	r3, r3, #4
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <MX_GPIO_Init+0xd0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0304 	and.w	r3, r3, #4
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	4b26      	ldr	r3, [pc, #152]	; (8000614 <MX_GPIO_Init+0xd0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a25      	ldr	r2, [pc, #148]	; (8000614 <MX_GPIO_Init+0xd0>)
 8000580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b23      	ldr	r3, [pc, #140]	; (8000614 <MX_GPIO_Init+0xd0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <MX_GPIO_Init+0xd0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a1e      	ldr	r2, [pc, #120]	; (8000614 <MX_GPIO_Init+0xd0>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <MX_GPIO_Init+0xd0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_GPIO_Init+0xd0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <MX_GPIO_Init+0xd0>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_GPIO_Init+0xd0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <MX_GPIO_Init+0xd4>)
 80005d0:	f001 face 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_GPIO_Init+0xd8>)
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <MX_GPIO_Init+0xdc>)
 80005ea:	f001 f92f 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ee:	2320      	movs	r3, #32
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_GPIO_Init+0xd4>)
 8000606:	f001 f921 	bl	800184c <HAL_GPIO_Init>

}
 800060a:	bf00      	nop
 800060c:	3728      	adds	r7, #40	; 0x28
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000
 800061c:	10210000 	.word	0x10210000
 8000620:	40020800 	.word	0x40020800

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fbfc 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f82a 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f7ff ff88 	bl	8000544 <MX_GPIO_Init>
  MX_DMA_Init();
 8000634:	f7ff ff66 	bl	8000504 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000638:	f000 fb1e 	bl	8000c78 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800063c:	f000 fa3c 	bl	8000ab8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2,(uint8_t *)Rx_Data,10);
 8000640:	220a      	movs	r2, #10
 8000642:	490b      	ldr	r1, [pc, #44]	; (8000670 <main+0x4c>)
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <main+0x50>)
 8000646:	f002 ff05 	bl	8003454 <HAL_UART_Receive_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800064a:	2100      	movs	r1, #0
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <main+0x54>)
 800064e:	f002 f81d 	bl	800268c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000652:	2104      	movs	r1, #4
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <main+0x54>)
 8000656:	f002 f819 	bl	800268c <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  htim2.Instance->CCR2=pwm2;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <main+0x58>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <main+0x54>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	639a      	str	r2, [r3, #56]	; 0x38
  htim2.Instance->CCR1=pwm1;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <main+0x5c>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <main+0x54>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066e:	e7fe      	b.n	800066e <main+0x4a>
 8000670:	20000294 	.word	0x20000294
 8000674:	200002e4 	.word	0x200002e4
 8000678:	200002a4 	.word	0x200002a4
 800067c:	20000004 	.word	0x20000004
 8000680:	20000000 	.word	0x20000000

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fdfa 	bl	800428c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <SystemClock_Config+0xd0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a28      	ldr	r2, [pc, #160]	; (8000754 <SystemClock_Config+0xd0>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <SystemClock_Config+0xd0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <SystemClock_Config+0xd4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <SystemClock_Config+0xd4>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006fc:	23a8      	movs	r3, #168	; 0xa8
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000700:	2304      	movs	r3, #4
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fd01 	bl	8002118 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800071c:	f000 f90e 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2102      	movs	r1, #2
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fa31 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000748:	f000 f8f8 	bl	800093c <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3750      	adds	r7, #80	; 0x50
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  //UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	//HAL_UART_Transmit(&huart2,(uint8_t *)Rx_Data,10,100);
    lenX[0]=Rx_Data[0];
 8000764:	4b61      	ldr	r3, [pc, #388]	; (80008ec <HAL_UART_RxCpltCallback+0x190>)
 8000766:	781a      	ldrb	r2, [r3, #0]
 8000768:	4b61      	ldr	r3, [pc, #388]	; (80008f0 <HAL_UART_RxCpltCallback+0x194>)
 800076a:	701a      	strb	r2, [r3, #0]
    lenY[0]=Rx_Data[1];
 800076c:	4b5f      	ldr	r3, [pc, #380]	; (80008ec <HAL_UART_RxCpltCallback+0x190>)
 800076e:	785a      	ldrb	r2, [r3, #1]
 8000770:	4b60      	ldr	r3, [pc, #384]	; (80008f4 <HAL_UART_RxCpltCallback+0x198>)
 8000772:	701a      	strb	r2, [r3, #0]
	NX=atoi(lenX);
 8000774:	485e      	ldr	r0, [pc, #376]	; (80008f0 <HAL_UART_RxCpltCallback+0x194>)
 8000776:	f003 fd4b 	bl	8004210 <atoi>
 800077a:	4602      	mov	r2, r0
 800077c:	4b5e      	ldr	r3, [pc, #376]	; (80008f8 <HAL_UART_RxCpltCallback+0x19c>)
 800077e:	601a      	str	r2, [r3, #0]
	NY=atoi(lenY);
 8000780:	485c      	ldr	r0, [pc, #368]	; (80008f4 <HAL_UART_RxCpltCallback+0x198>)
 8000782:	f003 fd45 	bl	8004210 <atoi>
 8000786:	4602      	mov	r2, r0
 8000788:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <HAL_UART_RxCpltCallback+0x1a0>)
 800078a:	601a      	str	r2, [r3, #0]
	X=(char*)malloc(NX*sizeof(uint8_t));
 800078c:	4b5a      	ldr	r3, [pc, #360]	; (80008f8 <HAL_UART_RxCpltCallback+0x19c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f003 fd6b 	bl	800426c <malloc>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	4b59      	ldr	r3, [pc, #356]	; (8000900 <HAL_UART_RxCpltCallback+0x1a4>)
 800079c:	601a      	str	r2, [r3, #0]
	Y=(char*)malloc(NY*sizeof(uint8_t));
 800079e:	4b57      	ldr	r3, [pc, #348]	; (80008fc <HAL_UART_RxCpltCallback+0x1a0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 fd62 	bl	800426c <malloc>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b55      	ldr	r3, [pc, #340]	; (8000904 <HAL_UART_RxCpltCallback+0x1a8>)
 80007ae:	601a      	str	r2, [r3, #0]
	for (i=0;i<NX;i++)
 80007b0:	4b55      	ldr	r3, [pc, #340]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	e00f      	b.n	80007d8 <HAL_UART_RxCpltCallback+0x7c>
	{
		X[i]=Rx_Data[i+2];
 80007b8:	4b53      	ldr	r3, [pc, #332]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	1c9a      	adds	r2, r3, #2
 80007be:	4b50      	ldr	r3, [pc, #320]	; (8000900 <HAL_UART_RxCpltCallback+0x1a4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4951      	ldr	r1, [pc, #324]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 80007c4:	6809      	ldr	r1, [r1, #0]
 80007c6:	440b      	add	r3, r1
 80007c8:	4948      	ldr	r1, [pc, #288]	; (80008ec <HAL_UART_RxCpltCallback+0x190>)
 80007ca:	5c8a      	ldrb	r2, [r1, r2]
 80007cc:	701a      	strb	r2, [r3, #0]
	for (i=0;i<NX;i++)
 80007ce:	4b4e      	ldr	r3, [pc, #312]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	4a4c      	ldr	r2, [pc, #304]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b4b      	ldr	r3, [pc, #300]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <HAL_UART_RxCpltCallback+0x19c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dbe9      	blt.n	80007b8 <HAL_UART_RxCpltCallback+0x5c>
	}
	for (i=0;i<NY;i++)
 80007e4:	4b48      	ldr	r3, [pc, #288]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	e012      	b.n	8000812 <HAL_UART_RxCpltCallback+0xb6>
	{
		Y[i]=Rx_Data[i+2+NX];
 80007ec:	4b46      	ldr	r3, [pc, #280]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	1c9a      	adds	r2, r3, #2
 80007f2:	4b41      	ldr	r3, [pc, #260]	; (80008f8 <HAL_UART_RxCpltCallback+0x19c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	441a      	add	r2, r3
 80007f8:	4b42      	ldr	r3, [pc, #264]	; (8000904 <HAL_UART_RxCpltCallback+0x1a8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4942      	ldr	r1, [pc, #264]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 80007fe:	6809      	ldr	r1, [r1, #0]
 8000800:	440b      	add	r3, r1
 8000802:	493a      	ldr	r1, [pc, #232]	; (80008ec <HAL_UART_RxCpltCallback+0x190>)
 8000804:	5c8a      	ldrb	r2, [r1, r2]
 8000806:	701a      	strb	r2, [r3, #0]
	for (i=0;i<NY;i++)
 8000808:	4b3f      	ldr	r3, [pc, #252]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	4a3e      	ldr	r2, [pc, #248]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <HAL_UART_RxCpltCallback+0x1ac>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4b39      	ldr	r3, [pc, #228]	; (80008fc <HAL_UART_RxCpltCallback+0x1a0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	429a      	cmp	r2, r3
 800081c:	dbe6      	blt.n	80007ec <HAL_UART_RxCpltCallback+0x90>
	}
	axX=atoi(X);
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <HAL_UART_RxCpltCallback+0x1a4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fcf4 	bl	8004210 <atoi>
 8000828:	4602      	mov	r2, r0
 800082a:	4b38      	ldr	r3, [pc, #224]	; (800090c <HAL_UART_RxCpltCallback+0x1b0>)
 800082c:	601a      	str	r2, [r3, #0]
	axY=atoi(Y);
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <HAL_UART_RxCpltCallback+0x1a8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fcec 	bl	8004210 <atoi>
 8000838:	4602      	mov	r2, r0
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <HAL_UART_RxCpltCallback+0x1b4>)
 800083c:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);

	len_float_1=((float)axX/320)*75;
 800083e:	4b33      	ldr	r3, [pc, #204]	; (800090c <HAL_UART_RxCpltCallback+0x1b0>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	ee07 3a90 	vmov	s15, r3
 8000846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800084a:	eddf 6a32 	vldr	s13, [pc, #200]	; 8000914 <HAL_UART_RxCpltCallback+0x1b8>
 800084e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000852:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000918 <HAL_UART_RxCpltCallback+0x1bc>
 8000856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800085a:	4b30      	ldr	r3, [pc, #192]	; (800091c <HAL_UART_RxCpltCallback+0x1c0>)
 800085c:	edc3 7a00 	vstr	s15, [r3]
	len_int_1=(int) len_float_1;
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <HAL_UART_RxCpltCallback+0x1c0>)
 8000862:	edd3 7a00 	vldr	s15, [r3]
 8000866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800086a:	ee17 2a90 	vmov	r2, s15
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <HAL_UART_RxCpltCallback+0x1c4>)
 8000870:	601a      	str	r2, [r3, #0]

	len_float_2=((float)axY/240)*75;
 8000872:	4b27      	ldr	r3, [pc, #156]	; (8000910 <HAL_UART_RxCpltCallback+0x1b4>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	ee07 3a90 	vmov	s15, r3
 800087a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800087e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000924 <HAL_UART_RxCpltCallback+0x1c8>
 8000882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000886:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000918 <HAL_UART_RxCpltCallback+0x1bc>
 800088a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <HAL_UART_RxCpltCallback+0x1cc>)
 8000890:	edc3 7a00 	vstr	s15, [r3]
	len_int_2=(int) len_float_2;
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <HAL_UART_RxCpltCallback+0x1cc>)
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800089e:	ee17 2a90 	vmov	r2, s15
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <HAL_UART_RxCpltCallback+0x1d0>)
 80008a4:	601a      	str	r2, [r3, #0]

	pwm2=(75+len_int_2);
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <HAL_UART_RxCpltCallback+0x1d0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	334b      	adds	r3, #75	; 0x4b
 80008ac:	4a20      	ldr	r2, [pc, #128]	; (8000930 <HAL_UART_RxCpltCallback+0x1d4>)
 80008ae:	6013      	str	r3, [r2, #0]
	pwm1=(75+len_int_1);
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <HAL_UART_RxCpltCallback+0x1c4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	334b      	adds	r3, #75	; 0x4b
 80008b6:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <HAL_UART_RxCpltCallback+0x1d8>)
 80008b8:	6013      	str	r3, [r2, #0]
	//len=snprintf(NULL,0,"%d",pwm);
	//mex=(char*)malloc((len+1)*sizeof(uint8_t));
	//snprintf(mex,len+1,"%d",pwm);
	//itoa(pwm,mex,10);
	htim2.Instance->CCR2=pwm2;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <HAL_UART_RxCpltCallback+0x1d4>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <HAL_UART_RxCpltCallback+0x1dc>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	639a      	str	r2, [r3, #56]	; 0x38
	htim2.Instance->CCR1=pwm1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <HAL_UART_RxCpltCallback+0x1d8>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <HAL_UART_RxCpltCallback+0x1dc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34

	//HAL_UART_Transmit(&huart2,mex,len+1,100);
	//free(mex);
	free(X);
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_UART_RxCpltCallback+0x1a4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fcd2 	bl	800427c <free>
	free(Y);
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_UART_RxCpltCallback+0x1a8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fccd 	bl	800427c <free>


}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000294 	.word	0x20000294
 80008f0:	20000210 	.word	0x20000210
 80008f4:	2000028c 	.word	0x2000028c
 80008f8:	2000032c 	.word	0x2000032c
 80008fc:	20000280 	.word	0x20000280
 8000900:	20000328 	.word	0x20000328
 8000904:	2000027c 	.word	0x2000027c
 8000908:	20000200 	.word	0x20000200
 800090c:	20000324 	.word	0x20000324
 8000910:	20000290 	.word	0x20000290
 8000914:	43a00000 	.word	0x43a00000
 8000918:	42960000 	.word	0x42960000
 800091c:	200002a0 	.word	0x200002a0
 8000920:	20000278 	.word	0x20000278
 8000924:	43700000 	.word	0x43700000
 8000928:	20000288 	.word	0x20000288
 800092c:	20000284 	.word	0x20000284
 8000930:	20000004 	.word	0x20000004
 8000934:	20000000 	.word	0x20000000
 8000938:	200002a4 	.word	0x200002a4

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800098a:	2007      	movs	r0, #7
 800098c:	f000 fb8c 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 fa6a 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <DMA1_Stream5_IRQHandler+0x10>)
 80009fe:	f000 fcbd 	bl	800137c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000218 	.word	0x20000218

08000a0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <TIM2_IRQHandler+0x10>)
 8000a12:	f001 fe79 	bl	8002708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200002a4 	.word	0x200002a4

08000a20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <USART2_IRQHandler+0x10>)
 8000a26:	f002 fd95 	bl	8003554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200002e4 	.word	0x200002e4

08000a34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <_sbrk+0x50>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <_sbrk+0x16>
		heap_end = &end;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <_sbrk+0x50>)
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <_sbrk+0x54>)
 8000a48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <_sbrk+0x50>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <_sbrk+0x50>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	466a      	mov	r2, sp
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d907      	bls.n	8000a6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a5e:	f003 fbdb 	bl	8004218 <__errno>
 8000a62:	4602      	mov	r2, r0
 8000a64:	230c      	movs	r3, #12
 8000a66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	e006      	b.n	8000a7c <_sbrk+0x48>
	}

	heap_end += incr;
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <_sbrk+0x50>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <_sbrk+0x50>)
 8000a78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000204 	.word	0x20000204
 8000a88:	20000338 	.word	0x20000338

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <SystemInit+0x28>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <SystemInit+0x28>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SystemInit+0x28>)
 8000aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa6:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	; 0x38
 8000abc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
 8000ae4:	615a      	str	r2, [r3, #20]
 8000ae6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000ae8:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8000af0:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000af2:	f240 3247 	movw	r2, #839	; 0x347
 8000af6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000b00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b12:	4829      	ldr	r0, [pc, #164]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000b14:	f001 fd5a 	bl	80025cc <HAL_TIM_Base_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f7ff ff0d 	bl	800093c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4822      	ldr	r0, [pc, #136]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000b30:	f001 ffb8 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b3a:	f7ff feff 	bl	800093c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b3e:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000b40:	f001 fd6f 	bl	8002622 <HAL_TIM_PWM_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b4a:	f7ff fef7 	bl	800093c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b56:	f107 0320 	add.w	r3, r7, #32
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000b5e:	f002 fb9b 	bl	8003298 <HAL_TIMEx_MasterConfigSynchronization>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b68:	f7ff fee8 	bl	800093c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b6c:	2360      	movs	r3, #96	; 0x60
 8000b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4619      	mov	r1, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000b84:	f001 fec8 	bl	8002918 <HAL_TIM_PWM_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b8e:	f7ff fed5 	bl	800093c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2204      	movs	r2, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000b9a:	f001 febd 	bl	8002918 <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000ba4:	f7ff feca 	bl	800093c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <MX_TIM2_Init+0x100>)
 8000baa:	f000 f82d 	bl	8000c08 <HAL_TIM_MspPostInit>

}
 8000bae:	bf00      	nop
 8000bb0:	3738      	adds	r7, #56	; 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200002a4 	.word	0x200002a4

08000bbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bcc:	d115      	bne.n	8000bfa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	201c      	movs	r0, #28
 8000bf0:	f000 fa65 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf4:	201c      	movs	r0, #28
 8000bf6:	f000 fa7e 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c28:	d11d      	bne.n	8000c66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_TIM_MspPostInit+0x68>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <HAL_TIM_MspPostInit+0x68>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_TIM_MspPostInit+0x68>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c46:	2303      	movs	r3, #3
 8000c48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <HAL_TIM_MspPostInit+0x6c>)
 8000c62:	f000 fdf3 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000

08000c78 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <MX_USART2_UART_Init+0x50>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	f002 fb82 	bl	80033b8 <HAL_UART_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cba:	f7ff fe3f 	bl	800093c <Error_Handler>
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200002e4 	.word	0x200002e4
 8000cc8:	40004400 	.word	0x40004400

08000ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a34      	ldr	r2, [pc, #208]	; (8000dbc <HAL_UART_MspInit+0xf0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d162      	bne.n	8000db4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <HAL_UART_MspInit+0xf4>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <HAL_UART_MspInit+0xf4>)
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <HAL_UART_MspInit+0xf4>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <HAL_UART_MspInit+0xf4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a2b      	ldr	r2, [pc, #172]	; (8000dc0 <HAL_UART_MspInit+0xf4>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_UART_MspInit+0xf4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d26:	230c      	movs	r3, #12
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d36:	2307      	movs	r3, #7
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4820      	ldr	r0, [pc, #128]	; (8000dc4 <HAL_UART_MspInit+0xf8>)
 8000d42:	f000 fd83 	bl	800184c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d48:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <HAL_UART_MspInit+0x100>)
 8000d4a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d52:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d66:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d88:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d8a:	f000 f9cf 	bl	800112c <HAL_DMA_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000d94:	f7ff fdd2 	bl	800093c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_UART_MspInit+0xfc>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2026      	movs	r0, #38	; 0x26
 8000daa:	f000 f988 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dae:	2026      	movs	r0, #38	; 0x26
 8000db0:	f000 f9a1 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	20000218 	.word	0x20000218
 8000dcc:	40026088 	.word	0x40026088

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dd6:	e003      	b.n	8000de0 <LoopCopyDataInit>

08000dd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ddc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dde:	3104      	adds	r1, #4

08000de0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000de4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000de6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000de8:	d3f6      	bcc.n	8000dd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dec:	e002      	b.n	8000df4 <LoopFillZerobss>

08000dee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000df0:	f842 3b04 	str.w	r3, [r2], #4

08000df4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000df6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000df8:	d3f9      	bcc.n	8000dee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dfa:	f7ff fe47 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f003 fa11 	bl	8004224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fc0f 	bl	8000624 <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e0c:	080046cc 	.word	0x080046cc
  ldr  r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e14:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000e18:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000e1c:	20000338 	.word	0x20000338

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_Init+0x40>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_Init+0x40>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_Init+0x40>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f92b 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fd78 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f943 	bl	8001112 <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f000 f90b 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000010 	.word	0x20000010
 8000ec4:	2000000c 	.word	0x2000000c

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000010 	.word	0x20000010
 8000eec:	20000330 	.word	0x20000330

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000330 	.word	0x20000330

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff3e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff31 	bl	8000f6c <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff feda 	bl	8000ef0 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e099      	b.n	800127c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2202      	movs	r2, #2
 8001154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001168:	e00f      	b.n	800118a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800116a:	f7ff fec1 	bl	8000ef0 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b05      	cmp	r3, #5
 8001176:	d908      	bls.n	800118a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2220      	movs	r2, #32
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2203      	movs	r2, #3
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e078      	b.n	800127c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e8      	bne.n	800116a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_DMA_Init+0x158>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d107      	bne.n	80011f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4313      	orrs	r3, r2
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f023 0307 	bic.w	r3, r3, #7
 800120a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	4313      	orrs	r3, r2
 8001214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	2b04      	cmp	r3, #4
 800121c:	d117      	bne.n	800124e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00e      	beq.n	800124e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fa91 	bl	8001758 <DMA_CheckFifoParam>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2240      	movs	r2, #64	; 0x40
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800124a:	2301      	movs	r3, #1
 800124c:	e016      	b.n	800127c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 fa48 	bl	80016ec <DMA_CalcBaseAndBitshift>
 800125c:	4603      	mov	r3, r0
 800125e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	223f      	movs	r2, #63	; 0x3f
 8001266:	409a      	lsls	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	f010803f 	.word	0xf010803f

08001288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_DMA_Start_IT+0x26>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e040      	b.n	8001330 <HAL_DMA_Start_IT+0xa8>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d12f      	bne.n	8001322 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2202      	movs	r2, #2
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 f9da 	bl	8001690 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e0:	223f      	movs	r2, #63	; 0x3f
 80012e2:	409a      	lsls	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0216 	orr.w	r2, r2, #22
 80012f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d007      	beq.n	8001310 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0208 	orr.w	r2, r2, #8
 800130e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e005      	b.n	800132e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800132a:	2302      	movs	r3, #2
 800132c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d004      	beq.n	8001356 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00c      	b.n	8001370 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2205      	movs	r2, #5
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0201 	bic.w	r2, r2, #1
 800136c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001388:	4b92      	ldr	r3, [pc, #584]	; (80015d4 <HAL_DMA_IRQHandler+0x258>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a92      	ldr	r2, [pc, #584]	; (80015d8 <HAL_DMA_IRQHandler+0x25c>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0a9b      	lsrs	r3, r3, #10
 8001394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a6:	2208      	movs	r2, #8
 80013a8:	409a      	lsls	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d01a      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0204 	bic.w	r2, r2, #4
 80013ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	2208      	movs	r2, #8
 80013d6:	409a      	lsls	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2201      	movs	r2, #1
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d012      	beq.n	800141e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00b      	beq.n	800141e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140a:	2201      	movs	r2, #1
 800140c:	409a      	lsls	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f043 0202 	orr.w	r2, r3, #2
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2204      	movs	r2, #4
 8001424:	409a      	lsls	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d012      	beq.n	8001454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00b      	beq.n	8001454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001440:	2204      	movs	r2, #4
 8001442:	409a      	lsls	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	f043 0204 	orr.w	r2, r3, #4
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	2210      	movs	r2, #16
 800145a:	409a      	lsls	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d043      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d03c      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	2210      	movs	r2, #16
 8001478:	409a      	lsls	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d018      	beq.n	80014be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d108      	bne.n	80014ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d024      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	4798      	blx	r3
 80014aa:	e01f      	b.n	80014ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01b      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	4798      	blx	r3
 80014bc:	e016      	b.n	80014ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0208 	bic.w	r2, r2, #8
 80014da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	2220      	movs	r2, #32
 80014f2:	409a      	lsls	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 808e 	beq.w	800161a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8086 	beq.w	800161a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001512:	2220      	movs	r2, #32
 8001514:	409a      	lsls	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b05      	cmp	r3, #5
 8001524:	d136      	bne.n	8001594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0216 	bic.w	r2, r2, #22
 8001534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <HAL_DMA_IRQHandler+0x1da>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0208 	bic.w	r2, r2, #8
 8001564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	223f      	movs	r2, #63	; 0x3f
 800156c:	409a      	lsls	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001586:	2b00      	cmp	r3, #0
 8001588:	d07d      	beq.n	8001686 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
        }
        return;
 8001592:	e078      	b.n	8001686 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01c      	beq.n	80015dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d108      	bne.n	80015c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d030      	beq.n	800161a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	4798      	blx	r3
 80015c0:	e02b      	b.n	800161a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d027      	beq.n	800161a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
 80015d2:	e022      	b.n	800161a <HAL_DMA_IRQHandler+0x29e>
 80015d4:	20000008 	.word	0x20000008
 80015d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0210 	bic.w	r2, r2, #16
 80015f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161e:	2b00      	cmp	r3, #0
 8001620:	d032      	beq.n	8001688 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d022      	beq.n	8001674 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2205      	movs	r2, #5
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	429a      	cmp	r2, r3
 8001650:	d307      	bcc.n	8001662 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f2      	bne.n	8001646 <HAL_DMA_IRQHandler+0x2ca>
 8001660:	e000      	b.n	8001664 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001662:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
 8001684:	e000      	b.n	8001688 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001686:	bf00      	nop
    }
  }
}
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop

08001690 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b40      	cmp	r3, #64	; 0x40
 80016bc:	d108      	bne.n	80016d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016ce:	e007      	b.n	80016e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	60da      	str	r2, [r3, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	3b10      	subs	r3, #16
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <DMA_CalcBaseAndBitshift+0x64>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001706:	4a13      	ldr	r2, [pc, #76]	; (8001754 <DMA_CalcBaseAndBitshift+0x68>)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d909      	bls.n	800172e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001722:	f023 0303 	bic.w	r3, r3, #3
 8001726:	1d1a      	adds	r2, r3, #4
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	659a      	str	r2, [r3, #88]	; 0x58
 800172c:	e007      	b.n	800173e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	aaaaaaab 	.word	0xaaaaaaab
 8001754:	080045a8 	.word	0x080045a8

08001758 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11f      	bne.n	80017b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d855      	bhi.n	8001824 <DMA_CheckFifoParam+0xcc>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <DMA_CheckFifoParam+0x28>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	08001791 	.word	0x08001791
 8001784:	080017a3 	.word	0x080017a3
 8001788:	08001791 	.word	0x08001791
 800178c:	08001825 	.word	0x08001825
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d045      	beq.n	8001828 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017a0:	e042      	b.n	8001828 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017aa:	d13f      	bne.n	800182c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b0:	e03c      	b.n	800182c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ba:	d121      	bne.n	8001800 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d836      	bhi.n	8001830 <DMA_CheckFifoParam+0xd8>
 80017c2:	a201      	add	r2, pc, #4	; (adr r2, 80017c8 <DMA_CheckFifoParam+0x70>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	080017df 	.word	0x080017df
 80017d0:	080017d9 	.word	0x080017d9
 80017d4:	080017f1 	.word	0x080017f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
      break;
 80017dc:	e02f      	b.n	800183e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d024      	beq.n	8001834 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017ee:	e021      	b.n	8001834 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017f8:	d11e      	bne.n	8001838 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017fe:	e01b      	b.n	8001838 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d902      	bls.n	800180c <DMA_CheckFifoParam+0xb4>
 8001806:	2b03      	cmp	r3, #3
 8001808:	d003      	beq.n	8001812 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800180a:	e018      	b.n	800183e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
      break;
 8001810:	e015      	b.n	800183e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00e      	beq.n	800183c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
      break;
 8001822:	e00b      	b.n	800183c <DMA_CheckFifoParam+0xe4>
      break;
 8001824:	bf00      	nop
 8001826:	e00a      	b.n	800183e <DMA_CheckFifoParam+0xe6>
      break;
 8001828:	bf00      	nop
 800182a:	e008      	b.n	800183e <DMA_CheckFifoParam+0xe6>
      break;
 800182c:	bf00      	nop
 800182e:	e006      	b.n	800183e <DMA_CheckFifoParam+0xe6>
      break;
 8001830:	bf00      	nop
 8001832:	e004      	b.n	800183e <DMA_CheckFifoParam+0xe6>
      break;
 8001834:	bf00      	nop
 8001836:	e002      	b.n	800183e <DMA_CheckFifoParam+0xe6>
      break;   
 8001838:	bf00      	nop
 800183a:	e000      	b.n	800183e <DMA_CheckFifoParam+0xe6>
      break;
 800183c:	bf00      	nop
    }
  } 
  
  return status; 
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e165      	b.n	8001b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8154 	bne.w	8001b2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d00b      	beq.n	80018a6 <HAL_GPIO_Init+0x5a>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d007      	beq.n	80018a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800189a:	2b11      	cmp	r3, #17
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b12      	cmp	r3, #18
 80018a4:	d130      	bne.n	8001908 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018dc:	2201      	movs	r2, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 0201 	and.w	r2, r3, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0xfc>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b12      	cmp	r3, #18
 8001946:	d123      	bne.n	8001990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80ae 	beq.w	8001b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b5c      	ldr	r3, [pc, #368]	; (8001b48 <HAL_GPIO_Init+0x2fc>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a5b      	ldr	r2, [pc, #364]	; (8001b48 <HAL_GPIO_Init+0x2fc>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_GPIO_Init+0x2fc>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ee:	4a57      	ldr	r2, [pc, #348]	; (8001b4c <HAL_GPIO_Init+0x300>)
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	3302      	adds	r3, #2
 80019f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	220f      	movs	r2, #15
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4e      	ldr	r2, [pc, #312]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d025      	beq.n	8001a66 <HAL_GPIO_Init+0x21a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4d      	ldr	r2, [pc, #308]	; (8001b54 <HAL_GPIO_Init+0x308>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01f      	beq.n	8001a62 <HAL_GPIO_Init+0x216>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4c      	ldr	r2, [pc, #304]	; (8001b58 <HAL_GPIO_Init+0x30c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d019      	beq.n	8001a5e <HAL_GPIO_Init+0x212>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4b      	ldr	r2, [pc, #300]	; (8001b5c <HAL_GPIO_Init+0x310>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0x20e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4a      	ldr	r2, [pc, #296]	; (8001b60 <HAL_GPIO_Init+0x314>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00d      	beq.n	8001a56 <HAL_GPIO_Init+0x20a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a49      	ldr	r2, [pc, #292]	; (8001b64 <HAL_GPIO_Init+0x318>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x206>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a48      	ldr	r2, [pc, #288]	; (8001b68 <HAL_GPIO_Init+0x31c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_GPIO_Init+0x202>
 8001a4a:	2306      	movs	r3, #6
 8001a4c:	e00c      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a4e:	2307      	movs	r3, #7
 8001a50:	e00a      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a52:	2305      	movs	r3, #5
 8001a54:	e008      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a56:	2304      	movs	r3, #4
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e004      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a66:	2300      	movs	r3, #0
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	f002 0203 	and.w	r2, r2, #3
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	4093      	lsls	r3, r2
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a78:	4934      	ldr	r1, [pc, #208]	; (8001b4c <HAL_GPIO_Init+0x300>)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a86:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_GPIO_Init+0x320>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aaa:	4a30      	ldr	r2, [pc, #192]	; (8001b6c <HAL_GPIO_Init+0x320>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_GPIO_Init+0x320>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ad4:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_GPIO_Init+0x320>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <HAL_GPIO_Init+0x320>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001afe:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <HAL_GPIO_Init+0x320>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_GPIO_Init+0x320>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b28:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <HAL_GPIO_Init+0x320>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	2b0f      	cmp	r3, #15
 8001b38:	f67f ae96 	bls.w	8001868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3724      	adds	r7, #36	; 0x24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40013800 	.word	0x40013800
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	40020c00 	.word	0x40020c00
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40021400 	.word	0x40021400
 8001b68:	40021800 	.word	0x40021800
 8001b6c:	40013c00 	.word	0x40013c00

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b8c:	e003      	b.n	8001b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b8e:	887b      	ldrh	r3, [r7, #2]
 8001b90:	041a      	lsls	r2, r3, #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	619a      	str	r2, [r3, #24]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0cc      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b68      	ldr	r3, [pc, #416]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d90c      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b65      	ldr	r3, [pc, #404]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b8      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	494d      	ldr	r1, [pc, #308]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d044      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d119      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c62:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e067      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4934      	ldr	r1, [pc, #208]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c94:	f7ff f92c 	bl	8000ef0 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7ff f928 	bl	8000ef0 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e04f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d20c      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e032      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4916      	ldr	r1, [pc, #88]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	490e      	ldr	r1, [pc, #56]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d2a:	f000 f855 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d2e:	4601      	mov	r1, r0
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f88c 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00
 8001d60:	40023800 	.word	0x40023800
 8001d64:	08004590 	.word	0x08004590
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	2000000c 	.word	0x2000000c

08001d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008

08001d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d8c:	f7ff fff0 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001d90:	4601      	mov	r1, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0a9b      	lsrs	r3, r3, #10
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	080045a0 	.word	0x080045a0

08001db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001db4:	f7ff ffdc 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001db8:	4601      	mov	r1, r0
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	0b5b      	lsrs	r3, r3, #13
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	4a03      	ldr	r2, [pc, #12]	; (8001dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	080045a0 	.word	0x080045a0

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df2:	4bc6      	ldr	r3, [pc, #792]	; (800210c <HAL_RCC_GetSysClockFreq+0x334>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	f200 817e 	bhi.w	80020fc <HAL_RCC_GetSysClockFreq+0x324>
 8001e00:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <HAL_RCC_GetSysClockFreq+0x30>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001e3d 	.word	0x08001e3d
 8001e0c:	080020fd 	.word	0x080020fd
 8001e10:	080020fd 	.word	0x080020fd
 8001e14:	080020fd 	.word	0x080020fd
 8001e18:	08001e43 	.word	0x08001e43
 8001e1c:	080020fd 	.word	0x080020fd
 8001e20:	080020fd 	.word	0x080020fd
 8001e24:	080020fd 	.word	0x080020fd
 8001e28:	08001e49 	.word	0x08001e49
 8001e2c:	080020fd 	.word	0x080020fd
 8001e30:	080020fd 	.word	0x080020fd
 8001e34:	080020fd 	.word	0x080020fd
 8001e38:	08001fa5 	.word	0x08001fa5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4bb4      	ldr	r3, [pc, #720]	; (8002110 <HAL_RCC_GetSysClockFreq+0x338>)
 8001e3e:	613b      	str	r3, [r7, #16]
       break;
 8001e40:	e15f      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e42:	4bb4      	ldr	r3, [pc, #720]	; (8002114 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001e44:	613b      	str	r3, [r7, #16]
      break;
 8001e46:	e15c      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e48:	4bb0      	ldr	r3, [pc, #704]	; (800210c <HAL_RCC_GetSysClockFreq+0x334>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e50:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e52:	4bae      	ldr	r3, [pc, #696]	; (800210c <HAL_RCC_GetSysClockFreq+0x334>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d04a      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	4bab      	ldr	r3, [pc, #684]	; (800210c <HAL_RCC_GetSysClockFreq+0x334>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	f04f 0400 	mov.w	r4, #0
 8001e68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	ea03 0501 	and.w	r5, r3, r1
 8001e74:	ea04 0602 	and.w	r6, r4, r2
 8001e78:	4629      	mov	r1, r5
 8001e7a:	4632      	mov	r2, r6
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	f04f 0400 	mov.w	r4, #0
 8001e84:	0154      	lsls	r4, r2, #5
 8001e86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e8a:	014b      	lsls	r3, r1, #5
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4622      	mov	r2, r4
 8001e90:	1b49      	subs	r1, r1, r5
 8001e92:	eb62 0206 	sbc.w	r2, r2, r6
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	f04f 0400 	mov.w	r4, #0
 8001e9e:	0194      	lsls	r4, r2, #6
 8001ea0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ea4:	018b      	lsls	r3, r1, #6
 8001ea6:	1a5b      	subs	r3, r3, r1
 8001ea8:	eb64 0402 	sbc.w	r4, r4, r2
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	00e2      	lsls	r2, r4, #3
 8001eb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001eba:	00d9      	lsls	r1, r3, #3
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4614      	mov	r4, r2
 8001ec0:	195b      	adds	r3, r3, r5
 8001ec2:	eb44 0406 	adc.w	r4, r4, r6
 8001ec6:	f04f 0100 	mov.w	r1, #0
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	0262      	lsls	r2, r4, #9
 8001ed0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ed4:	0259      	lsls	r1, r3, #9
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4614      	mov	r4, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	4621      	mov	r1, r4
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f04f 0400 	mov.w	r4, #0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	f7fe f98c 	bl	8000204 <__aeabi_uldivmod>
 8001eec:	4603      	mov	r3, r0
 8001eee:	460c      	mov	r4, r1
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e049      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef4:	4b85      	ldr	r3, [pc, #532]	; (800210c <HAL_RCC_GetSysClockFreq+0x334>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	099b      	lsrs	r3, r3, #6
 8001efa:	f04f 0400 	mov.w	r4, #0
 8001efe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	ea03 0501 	and.w	r5, r3, r1
 8001f0a:	ea04 0602 	and.w	r6, r4, r2
 8001f0e:	4629      	mov	r1, r5
 8001f10:	4632      	mov	r2, r6
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	f04f 0400 	mov.w	r4, #0
 8001f1a:	0154      	lsls	r4, r2, #5
 8001f1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f20:	014b      	lsls	r3, r1, #5
 8001f22:	4619      	mov	r1, r3
 8001f24:	4622      	mov	r2, r4
 8001f26:	1b49      	subs	r1, r1, r5
 8001f28:	eb62 0206 	sbc.w	r2, r2, r6
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	f04f 0400 	mov.w	r4, #0
 8001f34:	0194      	lsls	r4, r2, #6
 8001f36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f3a:	018b      	lsls	r3, r1, #6
 8001f3c:	1a5b      	subs	r3, r3, r1
 8001f3e:	eb64 0402 	sbc.w	r4, r4, r2
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	00e2      	lsls	r2, r4, #3
 8001f4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f50:	00d9      	lsls	r1, r3, #3
 8001f52:	460b      	mov	r3, r1
 8001f54:	4614      	mov	r4, r2
 8001f56:	195b      	adds	r3, r3, r5
 8001f58:	eb44 0406 	adc.w	r4, r4, r6
 8001f5c:	f04f 0100 	mov.w	r1, #0
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	02a2      	lsls	r2, r4, #10
 8001f66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f6a:	0299      	lsls	r1, r3, #10
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4614      	mov	r4, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	4621      	mov	r1, r4
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f04f 0400 	mov.w	r4, #0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	f7fe f941 	bl	8000204 <__aeabi_uldivmod>
 8001f82:	4603      	mov	r3, r0
 8001f84:	460c      	mov	r4, r1
 8001f86:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f88:	4b60      	ldr	r3, [pc, #384]	; (800210c <HAL_RCC_GetSysClockFreq+0x334>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	3301      	adds	r3, #1
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	613b      	str	r3, [r7, #16]
      break;
 8001fa2:	e0ae      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fa4:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_RCC_GetSysClockFreq+0x334>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fac:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fae:	4b57      	ldr	r3, [pc, #348]	; (800210c <HAL_RCC_GetSysClockFreq+0x334>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d04a      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fba:	4b54      	ldr	r3, [pc, #336]	; (800210c <HAL_RCC_GetSysClockFreq+0x334>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	099b      	lsrs	r3, r3, #6
 8001fc0:	f04f 0400 	mov.w	r4, #0
 8001fc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	ea03 0501 	and.w	r5, r3, r1
 8001fd0:	ea04 0602 	and.w	r6, r4, r2
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	4632      	mov	r2, r6
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	f04f 0400 	mov.w	r4, #0
 8001fe0:	0154      	lsls	r4, r2, #5
 8001fe2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fe6:	014b      	lsls	r3, r1, #5
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4622      	mov	r2, r4
 8001fec:	1b49      	subs	r1, r1, r5
 8001fee:	eb62 0206 	sbc.w	r2, r2, r6
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	f04f 0400 	mov.w	r4, #0
 8001ffa:	0194      	lsls	r4, r2, #6
 8001ffc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002000:	018b      	lsls	r3, r1, #6
 8002002:	1a5b      	subs	r3, r3, r1
 8002004:	eb64 0402 	sbc.w	r4, r4, r2
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	00e2      	lsls	r2, r4, #3
 8002012:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002016:	00d9      	lsls	r1, r3, #3
 8002018:	460b      	mov	r3, r1
 800201a:	4614      	mov	r4, r2
 800201c:	195b      	adds	r3, r3, r5
 800201e:	eb44 0406 	adc.w	r4, r4, r6
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	0262      	lsls	r2, r4, #9
 800202c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002030:	0259      	lsls	r1, r3, #9
 8002032:	460b      	mov	r3, r1
 8002034:	4614      	mov	r4, r2
 8002036:	4618      	mov	r0, r3
 8002038:	4621      	mov	r1, r4
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f04f 0400 	mov.w	r4, #0
 8002040:	461a      	mov	r2, r3
 8002042:	4623      	mov	r3, r4
 8002044:	f7fe f8de 	bl	8000204 <__aeabi_uldivmod>
 8002048:	4603      	mov	r3, r0
 800204a:	460c      	mov	r4, r1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e049      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002050:	4b2e      	ldr	r3, [pc, #184]	; (800210c <HAL_RCC_GetSysClockFreq+0x334>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	099b      	lsrs	r3, r3, #6
 8002056:	f04f 0400 	mov.w	r4, #0
 800205a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	ea03 0501 	and.w	r5, r3, r1
 8002066:	ea04 0602 	and.w	r6, r4, r2
 800206a:	4629      	mov	r1, r5
 800206c:	4632      	mov	r2, r6
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	f04f 0400 	mov.w	r4, #0
 8002076:	0154      	lsls	r4, r2, #5
 8002078:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800207c:	014b      	lsls	r3, r1, #5
 800207e:	4619      	mov	r1, r3
 8002080:	4622      	mov	r2, r4
 8002082:	1b49      	subs	r1, r1, r5
 8002084:	eb62 0206 	sbc.w	r2, r2, r6
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	f04f 0400 	mov.w	r4, #0
 8002090:	0194      	lsls	r4, r2, #6
 8002092:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002096:	018b      	lsls	r3, r1, #6
 8002098:	1a5b      	subs	r3, r3, r1
 800209a:	eb64 0402 	sbc.w	r4, r4, r2
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	00e2      	lsls	r2, r4, #3
 80020a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020ac:	00d9      	lsls	r1, r3, #3
 80020ae:	460b      	mov	r3, r1
 80020b0:	4614      	mov	r4, r2
 80020b2:	195b      	adds	r3, r3, r5
 80020b4:	eb44 0406 	adc.w	r4, r4, r6
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	02a2      	lsls	r2, r4, #10
 80020c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020c6:	0299      	lsls	r1, r3, #10
 80020c8:	460b      	mov	r3, r1
 80020ca:	4614      	mov	r4, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	4621      	mov	r1, r4
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f04f 0400 	mov.w	r4, #0
 80020d6:	461a      	mov	r2, r3
 80020d8:	4623      	mov	r3, r4
 80020da:	f7fe f893 	bl	8000204 <__aeabi_uldivmod>
 80020de:	4603      	mov	r3, r0
 80020e0:	460c      	mov	r4, r1
 80020e2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_GetSysClockFreq+0x334>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	0f1b      	lsrs	r3, r3, #28
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	613b      	str	r3, [r7, #16]
      break;
 80020fa:	e002      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_RCC_GetSysClockFreq+0x338>)
 80020fe:	613b      	str	r3, [r7, #16]
      break;
 8002100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002102:	693b      	ldr	r3, [r7, #16]
}
 8002104:	4618      	mov	r0, r3
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	00f42400 	.word	0x00f42400
 8002114:	007a1200 	.word	0x007a1200

08002118 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8083 	beq.w	8002238 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002132:	4b95      	ldr	r3, [pc, #596]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b04      	cmp	r3, #4
 800213c:	d019      	beq.n	8002172 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800213e:	4b92      	ldr	r3, [pc, #584]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002146:	2b08      	cmp	r3, #8
 8002148:	d106      	bne.n	8002158 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800214a:	4b8f      	ldr	r3, [pc, #572]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002156:	d00c      	beq.n	8002172 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002158:	4b8b      	ldr	r3, [pc, #556]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002160:	2b0c      	cmp	r3, #12
 8002162:	d112      	bne.n	800218a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002164:	4b88      	ldr	r3, [pc, #544]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002170:	d10b      	bne.n	800218a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	4b85      	ldr	r3, [pc, #532]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d05b      	beq.n	8002236 <HAL_RCC_OscConfig+0x11e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d157      	bne.n	8002236 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e216      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x8a>
 8002194:	4b7c      	ldr	r3, [pc, #496]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a7b      	ldr	r2, [pc, #492]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e01d      	b.n	80021de <HAL_RCC_OscConfig+0xc6>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021aa:	d10c      	bne.n	80021c6 <HAL_RCC_OscConfig+0xae>
 80021ac:	4b76      	ldr	r3, [pc, #472]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a75      	ldr	r2, [pc, #468]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b73      	ldr	r3, [pc, #460]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a72      	ldr	r2, [pc, #456]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	e00b      	b.n	80021de <HAL_RCC_OscConfig+0xc6>
 80021c6:	4b70      	ldr	r3, [pc, #448]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a6f      	ldr	r2, [pc, #444]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b6d      	ldr	r3, [pc, #436]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a6c      	ldr	r2, [pc, #432]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d013      	beq.n	800220e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7fe fe83 	bl	8000ef0 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ee:	f7fe fe7f 	bl	8000ef0 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b64      	cmp	r3, #100	; 0x64
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1db      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002200:	4b61      	ldr	r3, [pc, #388]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0xd6>
 800220c:	e014      	b.n	8002238 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7fe fe6f 	bl	8000ef0 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002216:	f7fe fe6b 	bl	8000ef0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b64      	cmp	r3, #100	; 0x64
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e1c7      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002228:	4b57      	ldr	r3, [pc, #348]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0xfe>
 8002234:	e000      	b.n	8002238 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002236:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d06f      	beq.n	8002324 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b00      	cmp	r3, #0
 800224e:	d017      	beq.n	8002280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002250:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002258:	2b08      	cmp	r3, #8
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800225c:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00b      	beq.n	8002280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002268:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002270:	2b0c      	cmp	r3, #12
 8002272:	d11c      	bne.n	80022ae <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002274:	4b44      	ldr	r3, [pc, #272]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d116      	bne.n	80022ae <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002280:	4b41      	ldr	r3, [pc, #260]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_OscConfig+0x180>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e18f      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4938      	ldr	r1, [pc, #224]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ac:	e03a      	b.n	8002324 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d020      	beq.n	80022f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b6:	4b35      	ldr	r3, [pc, #212]	; (800238c <HAL_RCC_OscConfig+0x274>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fe18 	bl	8000ef0 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c4:	f7fe fe14 	bl	8000ef0 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e170      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d6:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e2:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4925      	ldr	r1, [pc, #148]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
 80022f6:	e015      	b.n	8002324 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_RCC_OscConfig+0x274>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7fe fdf7 	bl	8000ef0 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002306:	f7fe fdf3 	bl	8000ef0 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e14f      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f0      	bne.n	8002306 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d037      	beq.n	80023a0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d016      	beq.n	8002366 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_RCC_OscConfig+0x278>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7fe fdd7 	bl	8000ef0 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002346:	f7fe fdd3 	bl	8000ef0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e12f      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800235a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x22e>
 8002364:	e01c      	b.n	80023a0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_OscConfig+0x278>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7fe fdc0 	bl	8000ef0 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002372:	e00f      	b.n	8002394 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002374:	f7fe fdbc 	bl	8000ef0 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d908      	bls.n	8002394 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e118      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	42470000 	.word	0x42470000
 8002390:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002394:	4b8a      	ldr	r3, [pc, #552]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 8002396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1e9      	bne.n	8002374 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 8097 	beq.w	80024dc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b2:	4b83      	ldr	r3, [pc, #524]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10f      	bne.n	80023de <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b7f      	ldr	r3, [pc, #508]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a7e      	ldr	r2, [pc, #504]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b7c      	ldr	r3, [pc, #496]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023da:	2301      	movs	r3, #1
 80023dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023de:	4b79      	ldr	r3, [pc, #484]	; (80025c4 <HAL_RCC_OscConfig+0x4ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d118      	bne.n	800241c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ea:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <HAL_RCC_OscConfig+0x4ac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a75      	ldr	r2, [pc, #468]	; (80025c4 <HAL_RCC_OscConfig+0x4ac>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f6:	f7fe fd7b 	bl	8000ef0 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fe:	f7fe fd77 	bl	8000ef0 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0d3      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	4b6c      	ldr	r3, [pc, #432]	; (80025c4 <HAL_RCC_OscConfig+0x4ac>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x31a>
 8002424:	4b66      	ldr	r3, [pc, #408]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	4a65      	ldr	r2, [pc, #404]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6713      	str	r3, [r2, #112]	; 0x70
 8002430:	e01c      	b.n	800246c <HAL_RCC_OscConfig+0x354>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b05      	cmp	r3, #5
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x33c>
 800243a:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	4a60      	ldr	r2, [pc, #384]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6713      	str	r3, [r2, #112]	; 0x70
 8002446:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a5d      	ldr	r2, [pc, #372]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	e00b      	b.n	800246c <HAL_RCC_OscConfig+0x354>
 8002454:	4b5a      	ldr	r3, [pc, #360]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	4a59      	ldr	r2, [pc, #356]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6713      	str	r3, [r2, #112]	; 0x70
 8002460:	4b57      	ldr	r3, [pc, #348]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a56      	ldr	r2, [pc, #344]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 8002466:	f023 0304 	bic.w	r3, r3, #4
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d015      	beq.n	80024a0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002474:	f7fe fd3c 	bl	8000ef0 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247a:	e00a      	b.n	8002492 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f7fe fd38 	bl	8000ef0 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e092      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002492:	4b4b      	ldr	r3, [pc, #300]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0ee      	beq.n	800247c <HAL_RCC_OscConfig+0x364>
 800249e:	e014      	b.n	80024ca <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7fe fd26 	bl	8000ef0 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a6:	e00a      	b.n	80024be <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a8:	f7fe fd22 	bl	8000ef0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e07c      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024be:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1ee      	bne.n	80024a8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d105      	bne.n	80024dc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d0:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	4a3a      	ldr	r2, [pc, #232]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 80024d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d068      	beq.n	80025b6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e4:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d060      	beq.n	80025b2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d145      	bne.n	8002584 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f8:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_RCC_OscConfig+0x4b0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fcf7 	bl	8000ef0 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002506:	f7fe fcf3 	bl	8000ef0 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e04f      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002518:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	019b      	lsls	r3, r3, #6
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	3b01      	subs	r3, #1
 800253e:	041b      	lsls	r3, r3, #16
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	061b      	lsls	r3, r3, #24
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	071b      	lsls	r3, r3, #28
 8002550:	491b      	ldr	r1, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <HAL_RCC_OscConfig+0x4b0>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fcc8 	bl	8000ef0 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fcc4 	bl	8000ef0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e020      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x44c>
 8002582:	e018      	b.n	80025b6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_RCC_OscConfig+0x4b0>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fcb1 	bl	8000ef0 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002592:	f7fe fcad 	bl	8000ef0 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e009      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_RCC_OscConfig+0x4a8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x47a>
 80025b0:	e001      	b.n	80025b6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42470060 	.word	0x42470060

080025cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e01d      	b.n	800261a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe fae2 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3304      	adds	r3, #4
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f000 fb34 	bl	8002c78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e01d      	b.n	8002670 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d106      	bne.n	800264e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f815 	bl	8002678 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	4619      	mov	r1, r3
 8002660:	4610      	mov	r0, r2
 8002662:	f000 fb09 	bl	8002c78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2201      	movs	r2, #1
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fdd4 	bl	800324c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a15      	ldr	r2, [pc, #84]	; (8002700 <HAL_TIM_PWM_Start+0x74>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d004      	beq.n	80026b8 <HAL_TIM_PWM_Start+0x2c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a14      	ldr	r2, [pc, #80]	; (8002704 <HAL_TIM_PWM_Start+0x78>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d101      	bne.n	80026bc <HAL_TIM_PWM_Start+0x30>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_TIM_PWM_Start+0x32>
 80026bc:	2300      	movs	r3, #0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b06      	cmp	r3, #6
 80026e2:	d007      	beq.n	80026f4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40010000 	.word	0x40010000
 8002704:	40010400 	.word	0x40010400

08002708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b02      	cmp	r3, #2
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0202 	mvn.w	r2, #2
 8002734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fa75 	bl	8002c3a <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa67 	bl	8002c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fa78 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b04      	cmp	r3, #4
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0204 	mvn.w	r2, #4
 8002788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2202      	movs	r2, #2
 800278e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa4b 	bl	8002c3a <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa3d 	bl	8002c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fa4e 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0208 	mvn.w	r2, #8
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2204      	movs	r2, #4
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa21 	bl	8002c3a <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fa13 	bl	8002c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fa24 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b10      	cmp	r3, #16
 8002818:	d122      	bne.n	8002860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b10      	cmp	r3, #16
 8002826:	d11b      	bne.n	8002860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0210 	mvn.w	r2, #16
 8002830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2208      	movs	r2, #8
 8002836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f9f7 	bl	8002c3a <HAL_TIM_IC_CaptureCallback>
 800284c:	e005      	b.n	800285a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f9e9 	bl	8002c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f9fa 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10e      	bne.n	800288c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d107      	bne.n	800288c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0201 	mvn.w	r2, #1
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f9c3 	bl	8002c12 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	2b80      	cmp	r3, #128	; 0x80
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b80      	cmp	r3, #128	; 0x80
 80028a6:	d107      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fd76 	bl	80033a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d10e      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d107      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f9bf 	bl	8002c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d10e      	bne.n	8002910 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d107      	bne.n	8002910 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0220 	mvn.w	r2, #32
 8002908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fd40 	bl	8003390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800292e:	2302      	movs	r3, #2
 8002930:	e0b4      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b0c      	cmp	r3, #12
 8002946:	f200 809f 	bhi.w	8002a88 <HAL_TIM_PWM_ConfigChannel+0x170>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002985 	.word	0x08002985
 8002954:	08002a89 	.word	0x08002a89
 8002958:	08002a89 	.word	0x08002a89
 800295c:	08002a89 	.word	0x08002a89
 8002960:	080029c5 	.word	0x080029c5
 8002964:	08002a89 	.word	0x08002a89
 8002968:	08002a89 	.word	0x08002a89
 800296c:	08002a89 	.word	0x08002a89
 8002970:	08002a07 	.word	0x08002a07
 8002974:	08002a89 	.word	0x08002a89
 8002978:	08002a89 	.word	0x08002a89
 800297c:	08002a89 	.word	0x08002a89
 8002980:	08002a47 	.word	0x08002a47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fa14 	bl	8002db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0208 	orr.w	r2, r2, #8
 800299e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0204 	bic.w	r2, r2, #4
 80029ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6999      	ldr	r1, [r3, #24]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	619a      	str	r2, [r3, #24]
      break;
 80029c2:	e062      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fa64 	bl	8002e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6999      	ldr	r1, [r3, #24]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	021a      	lsls	r2, r3, #8
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	619a      	str	r2, [r3, #24]
      break;
 8002a04:	e041      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fab9 	bl	8002f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0208 	orr.w	r2, r2, #8
 8002a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0204 	bic.w	r2, r2, #4
 8002a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69d9      	ldr	r1, [r3, #28]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	61da      	str	r2, [r3, #28]
      break;
 8002a44:	e021      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fb0d 	bl	800306c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69d9      	ldr	r1, [r3, #28]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	021a      	lsls	r2, r3, #8
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	61da      	str	r2, [r3, #28]
      break;
 8002a86:	e000      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_TIM_ConfigClockSource+0x18>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e0a6      	b.n	8002c0a <HAL_TIM_ConfigClockSource+0x166>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ada:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d067      	beq.n	8002bc4 <HAL_TIM_ConfigClockSource+0x120>
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d80b      	bhi.n	8002b10 <HAL_TIM_ConfigClockSource+0x6c>
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d073      	beq.n	8002be4 <HAL_TIM_ConfigClockSource+0x140>
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d802      	bhi.n	8002b06 <HAL_TIM_ConfigClockSource+0x62>
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d06f      	beq.n	8002be4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b04:	e078      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d06c      	beq.n	8002be4 <HAL_TIM_ConfigClockSource+0x140>
 8002b0a:	2b30      	cmp	r3, #48	; 0x30
 8002b0c:	d06a      	beq.n	8002be4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b0e:	e073      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b10:	2b70      	cmp	r3, #112	; 0x70
 8002b12:	d00d      	beq.n	8002b30 <HAL_TIM_ConfigClockSource+0x8c>
 8002b14:	2b70      	cmp	r3, #112	; 0x70
 8002b16:	d804      	bhi.n	8002b22 <HAL_TIM_ConfigClockSource+0x7e>
 8002b18:	2b50      	cmp	r3, #80	; 0x50
 8002b1a:	d033      	beq.n	8002b84 <HAL_TIM_ConfigClockSource+0xe0>
 8002b1c:	2b60      	cmp	r3, #96	; 0x60
 8002b1e:	d041      	beq.n	8002ba4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b20:	e06a      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b26:	d066      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x152>
 8002b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2c:	d017      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002b2e:	e063      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f000 fb64 	bl	800320c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b52:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]
      break;
 8002b5c:	e04c      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6899      	ldr	r1, [r3, #8]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f000 fb4d 	bl	800320c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b80:	609a      	str	r2, [r3, #8]
      break;
 8002b82:	e039      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	461a      	mov	r2, r3
 8002b92:	f000 fac1 	bl	8003118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2150      	movs	r1, #80	; 0x50
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fb1a 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002ba2:	e029      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f000 fae0 	bl	8003176 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2160      	movs	r1, #96	; 0x60
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fb0a 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002bc2:	e019      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f000 faa1 	bl	8003118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fafa 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002be2:	e009      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4619      	mov	r1, r3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	f000 faf1 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002bf4:	e000      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a40      	ldr	r2, [pc, #256]	; (8002d8c <TIM_Base_SetConfig+0x114>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d013      	beq.n	8002cb8 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c96:	d00f      	beq.n	8002cb8 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a3d      	ldr	r2, [pc, #244]	; (8002d90 <TIM_Base_SetConfig+0x118>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00b      	beq.n	8002cb8 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a3c      	ldr	r2, [pc, #240]	; (8002d94 <TIM_Base_SetConfig+0x11c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d007      	beq.n	8002cb8 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3b      	ldr	r2, [pc, #236]	; (8002d98 <TIM_Base_SetConfig+0x120>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3a      	ldr	r2, [pc, #232]	; (8002d9c <TIM_Base_SetConfig+0x124>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d108      	bne.n	8002cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a2f      	ldr	r2, [pc, #188]	; (8002d8c <TIM_Base_SetConfig+0x114>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d02b      	beq.n	8002d2a <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d027      	beq.n	8002d2a <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2c      	ldr	r2, [pc, #176]	; (8002d90 <TIM_Base_SetConfig+0x118>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d023      	beq.n	8002d2a <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	; (8002d94 <TIM_Base_SetConfig+0x11c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01f      	beq.n	8002d2a <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <TIM_Base_SetConfig+0x120>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01b      	beq.n	8002d2a <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a29      	ldr	r2, [pc, #164]	; (8002d9c <TIM_Base_SetConfig+0x124>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d017      	beq.n	8002d2a <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a28      	ldr	r2, [pc, #160]	; (8002da0 <TIM_Base_SetConfig+0x128>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <TIM_Base_SetConfig+0x12c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00f      	beq.n	8002d2a <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <TIM_Base_SetConfig+0x130>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a25      	ldr	r2, [pc, #148]	; (8002dac <TIM_Base_SetConfig+0x134>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a24      	ldr	r2, [pc, #144]	; (8002db0 <TIM_Base_SetConfig+0x138>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d003      	beq.n	8002d2a <TIM_Base_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a23      	ldr	r2, [pc, #140]	; (8002db4 <TIM_Base_SetConfig+0x13c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d108      	bne.n	8002d3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <TIM_Base_SetConfig+0x114>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_Base_SetConfig+0xf8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <TIM_Base_SetConfig+0x124>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d103      	bne.n	8002d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	615a      	str	r2, [r3, #20]
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40010400 	.word	0x40010400
 8002da0:	40014000 	.word	0x40014000
 8002da4:	40014400 	.word	0x40014400
 8002da8:	40014800 	.word	0x40014800
 8002dac:	40001800 	.word	0x40001800
 8002db0:	40001c00 	.word	0x40001c00
 8002db4:	40002000 	.word	0x40002000

08002db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f023 0201 	bic.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f023 0302 	bic.w	r3, r3, #2
 8002e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a20      	ldr	r2, [pc, #128]	; (8002e90 <TIM_OC1_SetConfig+0xd8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_OC1_SetConfig+0x64>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <TIM_OC1_SetConfig+0xdc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d10c      	bne.n	8002e36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f023 0308 	bic.w	r3, r3, #8
 8002e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <TIM_OC1_SetConfig+0xd8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d003      	beq.n	8002e46 <TIM_OC1_SetConfig+0x8e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <TIM_OC1_SetConfig+0xdc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d111      	bne.n	8002e6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	621a      	str	r2, [r3, #32]
}
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40010400 	.word	0x40010400

08002e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f023 0210 	bic.w	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	021b      	lsls	r3, r3, #8
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f023 0320 	bic.w	r3, r3, #32
 8002ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a22      	ldr	r2, [pc, #136]	; (8002f7c <TIM_OC2_SetConfig+0xe4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d003      	beq.n	8002f00 <TIM_OC2_SetConfig+0x68>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a21      	ldr	r2, [pc, #132]	; (8002f80 <TIM_OC2_SetConfig+0xe8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d10d      	bne.n	8002f1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <TIM_OC2_SetConfig+0xe4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_OC2_SetConfig+0x94>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <TIM_OC2_SetConfig+0xe8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d113      	bne.n	8002f54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	621a      	str	r2, [r3, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	40010400 	.word	0x40010400

08002f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0303 	bic.w	r3, r3, #3
 8002fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a21      	ldr	r2, [pc, #132]	; (8003064 <TIM_OC3_SetConfig+0xe0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_OC3_SetConfig+0x66>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a20      	ldr	r2, [pc, #128]	; (8003068 <TIM_OC3_SetConfig+0xe4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10d      	bne.n	8003006 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a16      	ldr	r2, [pc, #88]	; (8003064 <TIM_OC3_SetConfig+0xe0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d003      	beq.n	8003016 <TIM_OC3_SetConfig+0x92>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <TIM_OC3_SetConfig+0xe4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d113      	bne.n	800303e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800301c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	621a      	str	r2, [r3, #32]
}
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	40010000 	.word	0x40010000
 8003068:	40010400 	.word	0x40010400

0800306c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	031b      	lsls	r3, r3, #12
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <TIM_OC4_SetConfig+0xa4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <TIM_OC4_SetConfig+0x68>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a11      	ldr	r2, [pc, #68]	; (8003114 <TIM_OC4_SetConfig+0xa8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d109      	bne.n	80030e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	621a      	str	r2, [r3, #32]
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40010000 	.word	0x40010000
 8003114:	40010400 	.word	0x40010400

08003118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	f023 0201 	bic.w	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f023 030a 	bic.w	r3, r3, #10
 8003154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	621a      	str	r2, [r3, #32]
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003176:	b480      	push	{r7}
 8003178:	b087      	sub	sp, #28
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f023 0210 	bic.w	r2, r3, #16
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	031b      	lsls	r3, r3, #12
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f043 0307 	orr.w	r3, r3, #7
 80031f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	609a      	str	r2, [r3, #8]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	021a      	lsls	r2, r3, #8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	431a      	orrs	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4313      	orrs	r3, r2
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	609a      	str	r2, [r3, #8]
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2201      	movs	r2, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1a      	ldr	r2, [r3, #32]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	fa01 f303 	lsl.w	r3, r1, r3
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	621a      	str	r2, [r3, #32]
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e05a      	b.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a21      	ldr	r2, [pc, #132]	; (8003374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d022      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fc:	d01d      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d018      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1b      	ldr	r2, [pc, #108]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1a      	ldr	r2, [pc, #104]	; (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00e      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a18      	ldr	r2, [pc, #96]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d009      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a17      	ldr	r2, [pc, #92]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d004      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a15      	ldr	r2, [pc, #84]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10c      	bne.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	4313      	orrs	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40010400 	.word	0x40010400
 8003388:	40014000 	.word	0x40014000
 800338c:	40001800 	.word	0x40001800

08003390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e03f      	b.n	800344a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fd fc74 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2224      	movs	r2, #36	; 0x24
 80033e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fb8b 	bl	8003b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b20      	cmp	r3, #32
 800346c:	d166      	bne.n	800353c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_UART_Receive_DMA+0x26>
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e05f      	b.n	800353e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_UART_Receive_DMA+0x38>
 8003488:	2302      	movs	r3, #2
 800348a:	e058      	b.n	800353e <HAL_UART_Receive_DMA+0xea>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	88fa      	ldrh	r2, [r7, #6]
 800349e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2222      	movs	r2, #34	; 0x22
 80034aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b2:	4a25      	ldr	r2, [pc, #148]	; (8003548 <HAL_UART_Receive_DMA+0xf4>)
 80034b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ba:	4a24      	ldr	r2, [pc, #144]	; (800354c <HAL_UART_Receive_DMA+0xf8>)
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	4a23      	ldr	r2, [pc, #140]	; (8003550 <HAL_UART_Receive_DMA+0xfc>)
 80034c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	2200      	movs	r2, #0
 80034cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80034ce:	f107 0308 	add.w	r3, r7, #8
 80034d2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3304      	adds	r3, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	f7fd fecf 	bl	8001288 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003516:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003536:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	08003791 	.word	0x08003791
 800354c:	080037f9 	.word	0x080037f9
 8003550:	08003815 	.word	0x08003815

08003554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10d      	bne.n	80035a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_UART_IRQHandler+0x52>
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fa38 	bl	8003a14 <UART_Receive_IT>
      return;
 80035a4:	e0d1      	b.n	800374a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80b0 	beq.w	800370e <HAL_UART_IRQHandler+0x1ba>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_UART_IRQHandler+0x70>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80a5 	beq.w	800370e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_UART_IRQHandler+0x90>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_UART_IRQHandler+0xb0>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	f043 0202 	orr.w	r2, r3, #2
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_UART_IRQHandler+0xd0>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	f043 0204 	orr.w	r2, r3, #4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00f      	beq.n	800364e <HAL_UART_IRQHandler+0xfa>
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <HAL_UART_IRQHandler+0xee>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	f043 0208 	orr.w	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d078      	beq.n	8003748 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <HAL_UART_IRQHandler+0x11c>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f9d2 	bl	8003a14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b40      	cmp	r3, #64	; 0x40
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <HAL_UART_IRQHandler+0x144>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d031      	beq.n	80036fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f91b 	bl	80038d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b40      	cmp	r3, #64	; 0x40
 80036aa:	d123      	bne.n	80036f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	4a21      	ldr	r2, [pc, #132]	; (8003750 <HAL_UART_IRQHandler+0x1fc>)
 80036ca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fd fe31 	bl	8001338 <HAL_DMA_Abort_IT>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d016      	beq.n	800370a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036e6:	4610      	mov	r0, r2
 80036e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ea:	e00e      	b.n	800370a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f845 	bl	800377c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f2:	e00a      	b.n	800370a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f841 	bl	800377c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fa:	e006      	b.n	800370a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f83d 	bl	800377c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003708:	e01e      	b.n	8003748 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370a:	bf00      	nop
    return;
 800370c:	e01c      	b.n	8003748 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_UART_IRQHandler+0x1d6>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f908 	bl	8003938 <UART_Transmit_IT>
    return;
 8003728:	e00f      	b.n	800374a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_UART_IRQHandler+0x1f6>
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f950 	bl	80039e4 <UART_EndTransmit_IT>
    return;
 8003744:	bf00      	nop
 8003746:	e000      	b.n	800374a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003748:	bf00      	nop
  }
}
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	08003911 	.word	0x08003911

08003754 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11e      	bne.n	80037ea <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695a      	ldr	r2, [r3, #20]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7fc ffb6 	bl	800075c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff ffae 	bl	8003768 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b21      	cmp	r3, #33	; 0x21
 8003846:	d108      	bne.n	800385a <UART_DMAError+0x46>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2200      	movs	r2, #0
 8003852:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003854:	68b8      	ldr	r0, [r7, #8]
 8003856:	f000 f827 	bl	80038a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	bf0c      	ite	eq
 8003868:	2301      	moveq	r3, #1
 800386a:	2300      	movne	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b22      	cmp	r3, #34	; 0x22
 800387a:	d108      	bne.n	800388e <UART_DMAError+0x7a>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2200      	movs	r2, #0
 8003886:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003888:	68b8      	ldr	r0, [r7, #8]
 800388a:	f000 f823 	bl	80038d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	f043 0210 	orr.w	r2, r3, #16
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800389a:	68b8      	ldr	r0, [r7, #8]
 800389c:	f7ff ff6e 	bl	800377c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80038be:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff ff26 	bl	800377c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b21      	cmp	r3, #33	; 0x21
 800394a:	d144      	bne.n	80039d6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003954:	d11a      	bne.n	800398c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800396a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d105      	bne.n	8003980 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	1c9a      	adds	r2, r3, #2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	621a      	str	r2, [r3, #32]
 800397e:	e00e      	b.n	800399e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	621a      	str	r2, [r3, #32]
 800398a:	e008      	b.n	800399e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	1c59      	adds	r1, r3, #1
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6211      	str	r1, [r2, #32]
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4619      	mov	r1, r3
 80039ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
  }
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff fea5 	bl	8003754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b22      	cmp	r3, #34	; 0x22
 8003a26:	d171      	bne.n	8003b0c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a30:	d123      	bne.n	8003a7a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10e      	bne.n	8003a5e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	1c9a      	adds	r2, r3, #2
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a5c:	e029      	b.n	8003ab2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
 8003a78:	e01b      	b.n	8003ab2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6858      	ldr	r0, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	1c59      	adds	r1, r3, #1
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6291      	str	r1, [r2, #40]	; 0x28
 8003a92:	b2c2      	uxtb	r2, r0
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e00c      	b.n	8003ab2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	1c58      	adds	r0, r3, #1
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	6288      	str	r0, [r1, #40]	; 0x28
 8003aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d120      	bne.n	8003b08 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0220 	bic.w	r2, r2, #32
 8003ad4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695a      	ldr	r2, [r3, #20]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fc fe2c 	bl	800075c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e002      	b.n	8003b0e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b5a:	f023 030c 	bic.w	r3, r3, #12
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	68f9      	ldr	r1, [r7, #12]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b86:	f040 818b 	bne.w	8003ea0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4ac1      	ldr	r2, [pc, #772]	; (8003e94 <UART_SetConfig+0x37c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d005      	beq.n	8003ba0 <UART_SetConfig+0x88>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4abf      	ldr	r2, [pc, #764]	; (8003e98 <UART_SetConfig+0x380>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	f040 80bd 	bne.w	8003d1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ba0:	f7fe f906 	bl	8001db0 <HAL_RCC_GetPCLK2Freq>
 8003ba4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	461d      	mov	r5, r3
 8003baa:	f04f 0600 	mov.w	r6, #0
 8003bae:	46a8      	mov	r8, r5
 8003bb0:	46b1      	mov	r9, r6
 8003bb2:	eb18 0308 	adds.w	r3, r8, r8
 8003bb6:	eb49 0409 	adc.w	r4, r9, r9
 8003bba:	4698      	mov	r8, r3
 8003bbc:	46a1      	mov	r9, r4
 8003bbe:	eb18 0805 	adds.w	r8, r8, r5
 8003bc2:	eb49 0906 	adc.w	r9, r9, r6
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bda:	4688      	mov	r8, r1
 8003bdc:	4691      	mov	r9, r2
 8003bde:	eb18 0005 	adds.w	r0, r8, r5
 8003be2:	eb49 0106 	adc.w	r1, r9, r6
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	461d      	mov	r5, r3
 8003bec:	f04f 0600 	mov.w	r6, #0
 8003bf0:	196b      	adds	r3, r5, r5
 8003bf2:	eb46 0406 	adc.w	r4, r6, r6
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	f7fc fb03 	bl	8000204 <__aeabi_uldivmod>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	461a      	mov	r2, r3
 8003c04:	4ba5      	ldr	r3, [pc, #660]	; (8003e9c <UART_SetConfig+0x384>)
 8003c06:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	461d      	mov	r5, r3
 8003c14:	f04f 0600 	mov.w	r6, #0
 8003c18:	46a9      	mov	r9, r5
 8003c1a:	46b2      	mov	sl, r6
 8003c1c:	eb19 0309 	adds.w	r3, r9, r9
 8003c20:	eb4a 040a 	adc.w	r4, sl, sl
 8003c24:	4699      	mov	r9, r3
 8003c26:	46a2      	mov	sl, r4
 8003c28:	eb19 0905 	adds.w	r9, r9, r5
 8003c2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c44:	4689      	mov	r9, r1
 8003c46:	4692      	mov	sl, r2
 8003c48:	eb19 0005 	adds.w	r0, r9, r5
 8003c4c:	eb4a 0106 	adc.w	r1, sl, r6
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	461d      	mov	r5, r3
 8003c56:	f04f 0600 	mov.w	r6, #0
 8003c5a:	196b      	adds	r3, r5, r5
 8003c5c:	eb46 0406 	adc.w	r4, r6, r6
 8003c60:	461a      	mov	r2, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	f7fc face 	bl	8000204 <__aeabi_uldivmod>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b8b      	ldr	r3, [pc, #556]	; (8003e9c <UART_SetConfig+0x384>)
 8003c70:	fba3 1302 	umull	r1, r3, r3, r2
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	2164      	movs	r1, #100	; 0x64
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	3332      	adds	r3, #50	; 0x32
 8003c82:	4a86      	ldr	r2, [pc, #536]	; (8003e9c <UART_SetConfig+0x384>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c90:	4498      	add	r8, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	461d      	mov	r5, r3
 8003c96:	f04f 0600 	mov.w	r6, #0
 8003c9a:	46a9      	mov	r9, r5
 8003c9c:	46b2      	mov	sl, r6
 8003c9e:	eb19 0309 	adds.w	r3, r9, r9
 8003ca2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ca6:	4699      	mov	r9, r3
 8003ca8:	46a2      	mov	sl, r4
 8003caa:	eb19 0905 	adds.w	r9, r9, r5
 8003cae:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cc6:	4689      	mov	r9, r1
 8003cc8:	4692      	mov	sl, r2
 8003cca:	eb19 0005 	adds.w	r0, r9, r5
 8003cce:	eb4a 0106 	adc.w	r1, sl, r6
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	461d      	mov	r5, r3
 8003cd8:	f04f 0600 	mov.w	r6, #0
 8003cdc:	196b      	adds	r3, r5, r5
 8003cde:	eb46 0406 	adc.w	r4, r6, r6
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	f7fc fa8d 	bl	8000204 <__aeabi_uldivmod>
 8003cea:	4603      	mov	r3, r0
 8003cec:	460c      	mov	r4, r1
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <UART_SetConfig+0x384>)
 8003cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2164      	movs	r1, #100	; 0x64
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	3332      	adds	r3, #50	; 0x32
 8003d04:	4a65      	ldr	r2, [pc, #404]	; (8003e9c <UART_SetConfig+0x384>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	f003 0207 	and.w	r2, r3, #7
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4442      	add	r2, r8
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	e26f      	b.n	80041fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d1a:	f7fe f835 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8003d1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	461d      	mov	r5, r3
 8003d24:	f04f 0600 	mov.w	r6, #0
 8003d28:	46a8      	mov	r8, r5
 8003d2a:	46b1      	mov	r9, r6
 8003d2c:	eb18 0308 	adds.w	r3, r8, r8
 8003d30:	eb49 0409 	adc.w	r4, r9, r9
 8003d34:	4698      	mov	r8, r3
 8003d36:	46a1      	mov	r9, r4
 8003d38:	eb18 0805 	adds.w	r8, r8, r5
 8003d3c:	eb49 0906 	adc.w	r9, r9, r6
 8003d40:	f04f 0100 	mov.w	r1, #0
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d54:	4688      	mov	r8, r1
 8003d56:	4691      	mov	r9, r2
 8003d58:	eb18 0005 	adds.w	r0, r8, r5
 8003d5c:	eb49 0106 	adc.w	r1, r9, r6
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	461d      	mov	r5, r3
 8003d66:	f04f 0600 	mov.w	r6, #0
 8003d6a:	196b      	adds	r3, r5, r5
 8003d6c:	eb46 0406 	adc.w	r4, r6, r6
 8003d70:	461a      	mov	r2, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	f7fc fa46 	bl	8000204 <__aeabi_uldivmod>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b47      	ldr	r3, [pc, #284]	; (8003e9c <UART_SetConfig+0x384>)
 8003d80:	fba3 2302 	umull	r2, r3, r3, r2
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	461d      	mov	r5, r3
 8003d8e:	f04f 0600 	mov.w	r6, #0
 8003d92:	46a9      	mov	r9, r5
 8003d94:	46b2      	mov	sl, r6
 8003d96:	eb19 0309 	adds.w	r3, r9, r9
 8003d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d9e:	4699      	mov	r9, r3
 8003da0:	46a2      	mov	sl, r4
 8003da2:	eb19 0905 	adds.w	r9, r9, r5
 8003da6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003daa:	f04f 0100 	mov.w	r1, #0
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dbe:	4689      	mov	r9, r1
 8003dc0:	4692      	mov	sl, r2
 8003dc2:	eb19 0005 	adds.w	r0, r9, r5
 8003dc6:	eb4a 0106 	adc.w	r1, sl, r6
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	461d      	mov	r5, r3
 8003dd0:	f04f 0600 	mov.w	r6, #0
 8003dd4:	196b      	adds	r3, r5, r5
 8003dd6:	eb46 0406 	adc.w	r4, r6, r6
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4623      	mov	r3, r4
 8003dde:	f7fc fa11 	bl	8000204 <__aeabi_uldivmod>
 8003de2:	4603      	mov	r3, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <UART_SetConfig+0x384>)
 8003dea:	fba3 1302 	umull	r1, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2164      	movs	r1, #100	; 0x64
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	3332      	adds	r3, #50	; 0x32
 8003dfc:	4a27      	ldr	r2, [pc, #156]	; (8003e9c <UART_SetConfig+0x384>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e0a:	4498      	add	r8, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	461d      	mov	r5, r3
 8003e10:	f04f 0600 	mov.w	r6, #0
 8003e14:	46a9      	mov	r9, r5
 8003e16:	46b2      	mov	sl, r6
 8003e18:	eb19 0309 	adds.w	r3, r9, r9
 8003e1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003e20:	4699      	mov	r9, r3
 8003e22:	46a2      	mov	sl, r4
 8003e24:	eb19 0905 	adds.w	r9, r9, r5
 8003e28:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e2c:	f04f 0100 	mov.w	r1, #0
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e40:	4689      	mov	r9, r1
 8003e42:	4692      	mov	sl, r2
 8003e44:	eb19 0005 	adds.w	r0, r9, r5
 8003e48:	eb4a 0106 	adc.w	r1, sl, r6
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	461d      	mov	r5, r3
 8003e52:	f04f 0600 	mov.w	r6, #0
 8003e56:	196b      	adds	r3, r5, r5
 8003e58:	eb46 0406 	adc.w	r4, r6, r6
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4623      	mov	r3, r4
 8003e60:	f7fc f9d0 	bl	8000204 <__aeabi_uldivmod>
 8003e64:	4603      	mov	r3, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <UART_SetConfig+0x384>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	3332      	adds	r3, #50	; 0x32
 8003e7e:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <UART_SetConfig+0x384>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	f003 0207 	and.w	r2, r3, #7
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4442      	add	r2, r8
 8003e90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e92:	e1b2      	b.n	80041fa <UART_SetConfig+0x6e2>
 8003e94:	40011000 	.word	0x40011000
 8003e98:	40011400 	.word	0x40011400
 8003e9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4ad7      	ldr	r2, [pc, #860]	; (8004204 <UART_SetConfig+0x6ec>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d005      	beq.n	8003eb6 <UART_SetConfig+0x39e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4ad6      	ldr	r2, [pc, #856]	; (8004208 <UART_SetConfig+0x6f0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	f040 80d1 	bne.w	8004058 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eb6:	f7fd ff7b 	bl	8001db0 <HAL_RCC_GetPCLK2Freq>
 8003eba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	469a      	mov	sl, r3
 8003ec0:	f04f 0b00 	mov.w	fp, #0
 8003ec4:	46d0      	mov	r8, sl
 8003ec6:	46d9      	mov	r9, fp
 8003ec8:	eb18 0308 	adds.w	r3, r8, r8
 8003ecc:	eb49 0409 	adc.w	r4, r9, r9
 8003ed0:	4698      	mov	r8, r3
 8003ed2:	46a1      	mov	r9, r4
 8003ed4:	eb18 080a 	adds.w	r8, r8, sl
 8003ed8:	eb49 090b 	adc.w	r9, r9, fp
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ee8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003eec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ef0:	4688      	mov	r8, r1
 8003ef2:	4691      	mov	r9, r2
 8003ef4:	eb1a 0508 	adds.w	r5, sl, r8
 8003ef8:	eb4b 0609 	adc.w	r6, fp, r9
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4619      	mov	r1, r3
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	f04f 0400 	mov.w	r4, #0
 8003f0e:	0094      	lsls	r4, r2, #2
 8003f10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f14:	008b      	lsls	r3, r1, #2
 8003f16:	461a      	mov	r2, r3
 8003f18:	4623      	mov	r3, r4
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	4631      	mov	r1, r6
 8003f1e:	f7fc f971 	bl	8000204 <__aeabi_uldivmod>
 8003f22:	4603      	mov	r3, r0
 8003f24:	460c      	mov	r4, r1
 8003f26:	461a      	mov	r2, r3
 8003f28:	4bb8      	ldr	r3, [pc, #736]	; (800420c <UART_SetConfig+0x6f4>)
 8003f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	469b      	mov	fp, r3
 8003f38:	f04f 0c00 	mov.w	ip, #0
 8003f3c:	46d9      	mov	r9, fp
 8003f3e:	46e2      	mov	sl, ip
 8003f40:	eb19 0309 	adds.w	r3, r9, r9
 8003f44:	eb4a 040a 	adc.w	r4, sl, sl
 8003f48:	4699      	mov	r9, r3
 8003f4a:	46a2      	mov	sl, r4
 8003f4c:	eb19 090b 	adds.w	r9, r9, fp
 8003f50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f68:	4689      	mov	r9, r1
 8003f6a:	4692      	mov	sl, r2
 8003f6c:	eb1b 0509 	adds.w	r5, fp, r9
 8003f70:	eb4c 060a 	adc.w	r6, ip, sl
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	f04f 0400 	mov.w	r4, #0
 8003f86:	0094      	lsls	r4, r2, #2
 8003f88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f8c:	008b      	lsls	r3, r1, #2
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4623      	mov	r3, r4
 8003f92:	4628      	mov	r0, r5
 8003f94:	4631      	mov	r1, r6
 8003f96:	f7fc f935 	bl	8000204 <__aeabi_uldivmod>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4b9a      	ldr	r3, [pc, #616]	; (800420c <UART_SetConfig+0x6f4>)
 8003fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2164      	movs	r1, #100	; 0x64
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	3332      	adds	r3, #50	; 0x32
 8003fb4:	4a95      	ldr	r2, [pc, #596]	; (800420c <UART_SetConfig+0x6f4>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	4498      	add	r8, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	469b      	mov	fp, r3
 8003fc6:	f04f 0c00 	mov.w	ip, #0
 8003fca:	46d9      	mov	r9, fp
 8003fcc:	46e2      	mov	sl, ip
 8003fce:	eb19 0309 	adds.w	r3, r9, r9
 8003fd2:	eb4a 040a 	adc.w	r4, sl, sl
 8003fd6:	4699      	mov	r9, r3
 8003fd8:	46a2      	mov	sl, r4
 8003fda:	eb19 090b 	adds.w	r9, r9, fp
 8003fde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fe2:	f04f 0100 	mov.w	r1, #0
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ff2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ff6:	4689      	mov	r9, r1
 8003ff8:	4692      	mov	sl, r2
 8003ffa:	eb1b 0509 	adds.w	r5, fp, r9
 8003ffe:	eb4c 060a 	adc.w	r6, ip, sl
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4619      	mov	r1, r3
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	f04f 0400 	mov.w	r4, #0
 8004014:	0094      	lsls	r4, r2, #2
 8004016:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800401a:	008b      	lsls	r3, r1, #2
 800401c:	461a      	mov	r2, r3
 800401e:	4623      	mov	r3, r4
 8004020:	4628      	mov	r0, r5
 8004022:	4631      	mov	r1, r6
 8004024:	f7fc f8ee 	bl	8000204 <__aeabi_uldivmod>
 8004028:	4603      	mov	r3, r0
 800402a:	460c      	mov	r4, r1
 800402c:	461a      	mov	r2, r3
 800402e:	4b77      	ldr	r3, [pc, #476]	; (800420c <UART_SetConfig+0x6f4>)
 8004030:	fba3 1302 	umull	r1, r3, r3, r2
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	2164      	movs	r1, #100	; 0x64
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	3332      	adds	r3, #50	; 0x32
 8004042:	4a72      	ldr	r2, [pc, #456]	; (800420c <UART_SetConfig+0x6f4>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4442      	add	r2, r8
 8004054:	609a      	str	r2, [r3, #8]
 8004056:	e0d0      	b.n	80041fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004058:	f7fd fe96 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 800405c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	469a      	mov	sl, r3
 8004062:	f04f 0b00 	mov.w	fp, #0
 8004066:	46d0      	mov	r8, sl
 8004068:	46d9      	mov	r9, fp
 800406a:	eb18 0308 	adds.w	r3, r8, r8
 800406e:	eb49 0409 	adc.w	r4, r9, r9
 8004072:	4698      	mov	r8, r3
 8004074:	46a1      	mov	r9, r4
 8004076:	eb18 080a 	adds.w	r8, r8, sl
 800407a:	eb49 090b 	adc.w	r9, r9, fp
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800408a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800408e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004092:	4688      	mov	r8, r1
 8004094:	4691      	mov	r9, r2
 8004096:	eb1a 0508 	adds.w	r5, sl, r8
 800409a:	eb4b 0609 	adc.w	r6, fp, r9
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4619      	mov	r1, r3
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	f04f 0400 	mov.w	r4, #0
 80040b0:	0094      	lsls	r4, r2, #2
 80040b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040b6:	008b      	lsls	r3, r1, #2
 80040b8:	461a      	mov	r2, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	4628      	mov	r0, r5
 80040be:	4631      	mov	r1, r6
 80040c0:	f7fc f8a0 	bl	8000204 <__aeabi_uldivmod>
 80040c4:	4603      	mov	r3, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b50      	ldr	r3, [pc, #320]	; (800420c <UART_SetConfig+0x6f4>)
 80040cc:	fba3 2302 	umull	r2, r3, r3, r2
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	469b      	mov	fp, r3
 80040da:	f04f 0c00 	mov.w	ip, #0
 80040de:	46d9      	mov	r9, fp
 80040e0:	46e2      	mov	sl, ip
 80040e2:	eb19 0309 	adds.w	r3, r9, r9
 80040e6:	eb4a 040a 	adc.w	r4, sl, sl
 80040ea:	4699      	mov	r9, r3
 80040ec:	46a2      	mov	sl, r4
 80040ee:	eb19 090b 	adds.w	r9, r9, fp
 80040f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040f6:	f04f 0100 	mov.w	r1, #0
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004102:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004106:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800410a:	4689      	mov	r9, r1
 800410c:	4692      	mov	sl, r2
 800410e:	eb1b 0509 	adds.w	r5, fp, r9
 8004112:	eb4c 060a 	adc.w	r6, ip, sl
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4619      	mov	r1, r3
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	f04f 0400 	mov.w	r4, #0
 8004128:	0094      	lsls	r4, r2, #2
 800412a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800412e:	008b      	lsls	r3, r1, #2
 8004130:	461a      	mov	r2, r3
 8004132:	4623      	mov	r3, r4
 8004134:	4628      	mov	r0, r5
 8004136:	4631      	mov	r1, r6
 8004138:	f7fc f864 	bl	8000204 <__aeabi_uldivmod>
 800413c:	4603      	mov	r3, r0
 800413e:	460c      	mov	r4, r1
 8004140:	461a      	mov	r2, r3
 8004142:	4b32      	ldr	r3, [pc, #200]	; (800420c <UART_SetConfig+0x6f4>)
 8004144:	fba3 1302 	umull	r1, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2164      	movs	r1, #100	; 0x64
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	3332      	adds	r3, #50	; 0x32
 8004156:	4a2d      	ldr	r2, [pc, #180]	; (800420c <UART_SetConfig+0x6f4>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004162:	4498      	add	r8, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	469b      	mov	fp, r3
 8004168:	f04f 0c00 	mov.w	ip, #0
 800416c:	46d9      	mov	r9, fp
 800416e:	46e2      	mov	sl, ip
 8004170:	eb19 0309 	adds.w	r3, r9, r9
 8004174:	eb4a 040a 	adc.w	r4, sl, sl
 8004178:	4699      	mov	r9, r3
 800417a:	46a2      	mov	sl, r4
 800417c:	eb19 090b 	adds.w	r9, r9, fp
 8004180:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004190:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004198:	4689      	mov	r9, r1
 800419a:	4692      	mov	sl, r2
 800419c:	eb1b 0509 	adds.w	r5, fp, r9
 80041a0:	eb4c 060a 	adc.w	r6, ip, sl
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4619      	mov	r1, r3
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	f04f 0400 	mov.w	r4, #0
 80041b6:	0094      	lsls	r4, r2, #2
 80041b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041bc:	008b      	lsls	r3, r1, #2
 80041be:	461a      	mov	r2, r3
 80041c0:	4623      	mov	r3, r4
 80041c2:	4628      	mov	r0, r5
 80041c4:	4631      	mov	r1, r6
 80041c6:	f7fc f81d 	bl	8000204 <__aeabi_uldivmod>
 80041ca:	4603      	mov	r3, r0
 80041cc:	460c      	mov	r4, r1
 80041ce:	461a      	mov	r2, r3
 80041d0:	4b0e      	ldr	r3, [pc, #56]	; (800420c <UART_SetConfig+0x6f4>)
 80041d2:	fba3 1302 	umull	r1, r3, r3, r2
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2164      	movs	r1, #100	; 0x64
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	3332      	adds	r3, #50	; 0x32
 80041e4:	4a09      	ldr	r2, [pc, #36]	; (800420c <UART_SetConfig+0x6f4>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	f003 020f 	and.w	r2, r3, #15
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4442      	add	r2, r8
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	e7ff      	b.n	80041fa <UART_SetConfig+0x6e2>
 80041fa:	bf00      	nop
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004204:	40011000 	.word	0x40011000
 8004208:	40011400 	.word	0x40011400
 800420c:	51eb851f 	.word	0x51eb851f

08004210 <atoi>:
 8004210:	220a      	movs	r2, #10
 8004212:	2100      	movs	r1, #0
 8004214:	f000 b976 	b.w	8004504 <strtol>

08004218 <__errno>:
 8004218:	4b01      	ldr	r3, [pc, #4]	; (8004220 <__errno+0x8>)
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000014 	.word	0x20000014

08004224 <__libc_init_array>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4e0d      	ldr	r6, [pc, #52]	; (800425c <__libc_init_array+0x38>)
 8004228:	4c0d      	ldr	r4, [pc, #52]	; (8004260 <__libc_init_array+0x3c>)
 800422a:	1ba4      	subs	r4, r4, r6
 800422c:	10a4      	asrs	r4, r4, #2
 800422e:	2500      	movs	r5, #0
 8004230:	42a5      	cmp	r5, r4
 8004232:	d109      	bne.n	8004248 <__libc_init_array+0x24>
 8004234:	4e0b      	ldr	r6, [pc, #44]	; (8004264 <__libc_init_array+0x40>)
 8004236:	4c0c      	ldr	r4, [pc, #48]	; (8004268 <__libc_init_array+0x44>)
 8004238:	f000 f99e 	bl	8004578 <_init>
 800423c:	1ba4      	subs	r4, r4, r6
 800423e:	10a4      	asrs	r4, r4, #2
 8004240:	2500      	movs	r5, #0
 8004242:	42a5      	cmp	r5, r4
 8004244:	d105      	bne.n	8004252 <__libc_init_array+0x2e>
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800424c:	4798      	blx	r3
 800424e:	3501      	adds	r5, #1
 8004250:	e7ee      	b.n	8004230 <__libc_init_array+0xc>
 8004252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004256:	4798      	blx	r3
 8004258:	3501      	adds	r5, #1
 800425a:	e7f2      	b.n	8004242 <__libc_init_array+0x1e>
 800425c:	080046c4 	.word	0x080046c4
 8004260:	080046c4 	.word	0x080046c4
 8004264:	080046c4 	.word	0x080046c4
 8004268:	080046c8 	.word	0x080046c8

0800426c <malloc>:
 800426c:	4b02      	ldr	r3, [pc, #8]	; (8004278 <malloc+0xc>)
 800426e:	4601      	mov	r1, r0
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	f000 b861 	b.w	8004338 <_malloc_r>
 8004276:	bf00      	nop
 8004278:	20000014 	.word	0x20000014

0800427c <free>:
 800427c:	4b02      	ldr	r3, [pc, #8]	; (8004288 <free+0xc>)
 800427e:	4601      	mov	r1, r0
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	f000 b80b 	b.w	800429c <_free_r>
 8004286:	bf00      	nop
 8004288:	20000014 	.word	0x20000014

0800428c <memset>:
 800428c:	4402      	add	r2, r0
 800428e:	4603      	mov	r3, r0
 8004290:	4293      	cmp	r3, r2
 8004292:	d100      	bne.n	8004296 <memset+0xa>
 8004294:	4770      	bx	lr
 8004296:	f803 1b01 	strb.w	r1, [r3], #1
 800429a:	e7f9      	b.n	8004290 <memset+0x4>

0800429c <_free_r>:
 800429c:	b538      	push	{r3, r4, r5, lr}
 800429e:	4605      	mov	r5, r0
 80042a0:	2900      	cmp	r1, #0
 80042a2:	d045      	beq.n	8004330 <_free_r+0x94>
 80042a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a8:	1f0c      	subs	r4, r1, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bfb8      	it	lt
 80042ae:	18e4      	addlt	r4, r4, r3
 80042b0:	f000 f953 	bl	800455a <__malloc_lock>
 80042b4:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <_free_r+0x98>)
 80042b6:	6813      	ldr	r3, [r2, #0]
 80042b8:	4610      	mov	r0, r2
 80042ba:	b933      	cbnz	r3, 80042ca <_free_r+0x2e>
 80042bc:	6063      	str	r3, [r4, #4]
 80042be:	6014      	str	r4, [r2, #0]
 80042c0:	4628      	mov	r0, r5
 80042c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042c6:	f000 b949 	b.w	800455c <__malloc_unlock>
 80042ca:	42a3      	cmp	r3, r4
 80042cc:	d90c      	bls.n	80042e8 <_free_r+0x4c>
 80042ce:	6821      	ldr	r1, [r4, #0]
 80042d0:	1862      	adds	r2, r4, r1
 80042d2:	4293      	cmp	r3, r2
 80042d4:	bf04      	itt	eq
 80042d6:	681a      	ldreq	r2, [r3, #0]
 80042d8:	685b      	ldreq	r3, [r3, #4]
 80042da:	6063      	str	r3, [r4, #4]
 80042dc:	bf04      	itt	eq
 80042de:	1852      	addeq	r2, r2, r1
 80042e0:	6022      	streq	r2, [r4, #0]
 80042e2:	6004      	str	r4, [r0, #0]
 80042e4:	e7ec      	b.n	80042c0 <_free_r+0x24>
 80042e6:	4613      	mov	r3, r2
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	b10a      	cbz	r2, 80042f0 <_free_r+0x54>
 80042ec:	42a2      	cmp	r2, r4
 80042ee:	d9fa      	bls.n	80042e6 <_free_r+0x4a>
 80042f0:	6819      	ldr	r1, [r3, #0]
 80042f2:	1858      	adds	r0, r3, r1
 80042f4:	42a0      	cmp	r0, r4
 80042f6:	d10b      	bne.n	8004310 <_free_r+0x74>
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	4401      	add	r1, r0
 80042fc:	1858      	adds	r0, r3, r1
 80042fe:	4282      	cmp	r2, r0
 8004300:	6019      	str	r1, [r3, #0]
 8004302:	d1dd      	bne.n	80042c0 <_free_r+0x24>
 8004304:	6810      	ldr	r0, [r2, #0]
 8004306:	6852      	ldr	r2, [r2, #4]
 8004308:	605a      	str	r2, [r3, #4]
 800430a:	4401      	add	r1, r0
 800430c:	6019      	str	r1, [r3, #0]
 800430e:	e7d7      	b.n	80042c0 <_free_r+0x24>
 8004310:	d902      	bls.n	8004318 <_free_r+0x7c>
 8004312:	230c      	movs	r3, #12
 8004314:	602b      	str	r3, [r5, #0]
 8004316:	e7d3      	b.n	80042c0 <_free_r+0x24>
 8004318:	6820      	ldr	r0, [r4, #0]
 800431a:	1821      	adds	r1, r4, r0
 800431c:	428a      	cmp	r2, r1
 800431e:	bf04      	itt	eq
 8004320:	6811      	ldreq	r1, [r2, #0]
 8004322:	6852      	ldreq	r2, [r2, #4]
 8004324:	6062      	str	r2, [r4, #4]
 8004326:	bf04      	itt	eq
 8004328:	1809      	addeq	r1, r1, r0
 800432a:	6021      	streq	r1, [r4, #0]
 800432c:	605c      	str	r4, [r3, #4]
 800432e:	e7c7      	b.n	80042c0 <_free_r+0x24>
 8004330:	bd38      	pop	{r3, r4, r5, pc}
 8004332:	bf00      	nop
 8004334:	20000208 	.word	0x20000208

08004338 <_malloc_r>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	1ccd      	adds	r5, r1, #3
 800433c:	f025 0503 	bic.w	r5, r5, #3
 8004340:	3508      	adds	r5, #8
 8004342:	2d0c      	cmp	r5, #12
 8004344:	bf38      	it	cc
 8004346:	250c      	movcc	r5, #12
 8004348:	2d00      	cmp	r5, #0
 800434a:	4606      	mov	r6, r0
 800434c:	db01      	blt.n	8004352 <_malloc_r+0x1a>
 800434e:	42a9      	cmp	r1, r5
 8004350:	d903      	bls.n	800435a <_malloc_r+0x22>
 8004352:	230c      	movs	r3, #12
 8004354:	6033      	str	r3, [r6, #0]
 8004356:	2000      	movs	r0, #0
 8004358:	bd70      	pop	{r4, r5, r6, pc}
 800435a:	f000 f8fe 	bl	800455a <__malloc_lock>
 800435e:	4a21      	ldr	r2, [pc, #132]	; (80043e4 <_malloc_r+0xac>)
 8004360:	6814      	ldr	r4, [r2, #0]
 8004362:	4621      	mov	r1, r4
 8004364:	b991      	cbnz	r1, 800438c <_malloc_r+0x54>
 8004366:	4c20      	ldr	r4, [pc, #128]	; (80043e8 <_malloc_r+0xb0>)
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	b91b      	cbnz	r3, 8004374 <_malloc_r+0x3c>
 800436c:	4630      	mov	r0, r6
 800436e:	f000 f83d 	bl	80043ec <_sbrk_r>
 8004372:	6020      	str	r0, [r4, #0]
 8004374:	4629      	mov	r1, r5
 8004376:	4630      	mov	r0, r6
 8004378:	f000 f838 	bl	80043ec <_sbrk_r>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d124      	bne.n	80043ca <_malloc_r+0x92>
 8004380:	230c      	movs	r3, #12
 8004382:	6033      	str	r3, [r6, #0]
 8004384:	4630      	mov	r0, r6
 8004386:	f000 f8e9 	bl	800455c <__malloc_unlock>
 800438a:	e7e4      	b.n	8004356 <_malloc_r+0x1e>
 800438c:	680b      	ldr	r3, [r1, #0]
 800438e:	1b5b      	subs	r3, r3, r5
 8004390:	d418      	bmi.n	80043c4 <_malloc_r+0x8c>
 8004392:	2b0b      	cmp	r3, #11
 8004394:	d90f      	bls.n	80043b6 <_malloc_r+0x7e>
 8004396:	600b      	str	r3, [r1, #0]
 8004398:	50cd      	str	r5, [r1, r3]
 800439a:	18cc      	adds	r4, r1, r3
 800439c:	4630      	mov	r0, r6
 800439e:	f000 f8dd 	bl	800455c <__malloc_unlock>
 80043a2:	f104 000b 	add.w	r0, r4, #11
 80043a6:	1d23      	adds	r3, r4, #4
 80043a8:	f020 0007 	bic.w	r0, r0, #7
 80043ac:	1ac3      	subs	r3, r0, r3
 80043ae:	d0d3      	beq.n	8004358 <_malloc_r+0x20>
 80043b0:	425a      	negs	r2, r3
 80043b2:	50e2      	str	r2, [r4, r3]
 80043b4:	e7d0      	b.n	8004358 <_malloc_r+0x20>
 80043b6:	428c      	cmp	r4, r1
 80043b8:	684b      	ldr	r3, [r1, #4]
 80043ba:	bf16      	itet	ne
 80043bc:	6063      	strne	r3, [r4, #4]
 80043be:	6013      	streq	r3, [r2, #0]
 80043c0:	460c      	movne	r4, r1
 80043c2:	e7eb      	b.n	800439c <_malloc_r+0x64>
 80043c4:	460c      	mov	r4, r1
 80043c6:	6849      	ldr	r1, [r1, #4]
 80043c8:	e7cc      	b.n	8004364 <_malloc_r+0x2c>
 80043ca:	1cc4      	adds	r4, r0, #3
 80043cc:	f024 0403 	bic.w	r4, r4, #3
 80043d0:	42a0      	cmp	r0, r4
 80043d2:	d005      	beq.n	80043e0 <_malloc_r+0xa8>
 80043d4:	1a21      	subs	r1, r4, r0
 80043d6:	4630      	mov	r0, r6
 80043d8:	f000 f808 	bl	80043ec <_sbrk_r>
 80043dc:	3001      	adds	r0, #1
 80043de:	d0cf      	beq.n	8004380 <_malloc_r+0x48>
 80043e0:	6025      	str	r5, [r4, #0]
 80043e2:	e7db      	b.n	800439c <_malloc_r+0x64>
 80043e4:	20000208 	.word	0x20000208
 80043e8:	2000020c 	.word	0x2000020c

080043ec <_sbrk_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4c06      	ldr	r4, [pc, #24]	; (8004408 <_sbrk_r+0x1c>)
 80043f0:	2300      	movs	r3, #0
 80043f2:	4605      	mov	r5, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	f7fc fb1c 	bl	8000a34 <_sbrk>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_sbrk_r+0x1a>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	b103      	cbz	r3, 8004406 <_sbrk_r+0x1a>
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	20000334 	.word	0x20000334

0800440c <_strtol_l.isra.0>:
 800440c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004410:	4680      	mov	r8, r0
 8004412:	4689      	mov	r9, r1
 8004414:	4692      	mov	sl, r2
 8004416:	461e      	mov	r6, r3
 8004418:	460f      	mov	r7, r1
 800441a:	463d      	mov	r5, r7
 800441c:	9808      	ldr	r0, [sp, #32]
 800441e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004422:	f000 f885 	bl	8004530 <__locale_ctype_ptr_l>
 8004426:	4420      	add	r0, r4
 8004428:	7843      	ldrb	r3, [r0, #1]
 800442a:	f013 0308 	ands.w	r3, r3, #8
 800442e:	d132      	bne.n	8004496 <_strtol_l.isra.0+0x8a>
 8004430:	2c2d      	cmp	r4, #45	; 0x2d
 8004432:	d132      	bne.n	800449a <_strtol_l.isra.0+0x8e>
 8004434:	787c      	ldrb	r4, [r7, #1]
 8004436:	1cbd      	adds	r5, r7, #2
 8004438:	2201      	movs	r2, #1
 800443a:	2e00      	cmp	r6, #0
 800443c:	d05d      	beq.n	80044fa <_strtol_l.isra.0+0xee>
 800443e:	2e10      	cmp	r6, #16
 8004440:	d109      	bne.n	8004456 <_strtol_l.isra.0+0x4a>
 8004442:	2c30      	cmp	r4, #48	; 0x30
 8004444:	d107      	bne.n	8004456 <_strtol_l.isra.0+0x4a>
 8004446:	782b      	ldrb	r3, [r5, #0]
 8004448:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800444c:	2b58      	cmp	r3, #88	; 0x58
 800444e:	d14f      	bne.n	80044f0 <_strtol_l.isra.0+0xe4>
 8004450:	786c      	ldrb	r4, [r5, #1]
 8004452:	2610      	movs	r6, #16
 8004454:	3502      	adds	r5, #2
 8004456:	2a00      	cmp	r2, #0
 8004458:	bf14      	ite	ne
 800445a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800445e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004462:	2700      	movs	r7, #0
 8004464:	fbb1 fcf6 	udiv	ip, r1, r6
 8004468:	4638      	mov	r0, r7
 800446a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800446e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004472:	2b09      	cmp	r3, #9
 8004474:	d817      	bhi.n	80044a6 <_strtol_l.isra.0+0x9a>
 8004476:	461c      	mov	r4, r3
 8004478:	42a6      	cmp	r6, r4
 800447a:	dd23      	ble.n	80044c4 <_strtol_l.isra.0+0xb8>
 800447c:	1c7b      	adds	r3, r7, #1
 800447e:	d007      	beq.n	8004490 <_strtol_l.isra.0+0x84>
 8004480:	4584      	cmp	ip, r0
 8004482:	d31c      	bcc.n	80044be <_strtol_l.isra.0+0xb2>
 8004484:	d101      	bne.n	800448a <_strtol_l.isra.0+0x7e>
 8004486:	45a6      	cmp	lr, r4
 8004488:	db19      	blt.n	80044be <_strtol_l.isra.0+0xb2>
 800448a:	fb00 4006 	mla	r0, r0, r6, r4
 800448e:	2701      	movs	r7, #1
 8004490:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004494:	e7eb      	b.n	800446e <_strtol_l.isra.0+0x62>
 8004496:	462f      	mov	r7, r5
 8004498:	e7bf      	b.n	800441a <_strtol_l.isra.0+0xe>
 800449a:	2c2b      	cmp	r4, #43	; 0x2b
 800449c:	bf04      	itt	eq
 800449e:	1cbd      	addeq	r5, r7, #2
 80044a0:	787c      	ldrbeq	r4, [r7, #1]
 80044a2:	461a      	mov	r2, r3
 80044a4:	e7c9      	b.n	800443a <_strtol_l.isra.0+0x2e>
 80044a6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80044aa:	2b19      	cmp	r3, #25
 80044ac:	d801      	bhi.n	80044b2 <_strtol_l.isra.0+0xa6>
 80044ae:	3c37      	subs	r4, #55	; 0x37
 80044b0:	e7e2      	b.n	8004478 <_strtol_l.isra.0+0x6c>
 80044b2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80044b6:	2b19      	cmp	r3, #25
 80044b8:	d804      	bhi.n	80044c4 <_strtol_l.isra.0+0xb8>
 80044ba:	3c57      	subs	r4, #87	; 0x57
 80044bc:	e7dc      	b.n	8004478 <_strtol_l.isra.0+0x6c>
 80044be:	f04f 37ff 	mov.w	r7, #4294967295
 80044c2:	e7e5      	b.n	8004490 <_strtol_l.isra.0+0x84>
 80044c4:	1c7b      	adds	r3, r7, #1
 80044c6:	d108      	bne.n	80044da <_strtol_l.isra.0+0xce>
 80044c8:	2322      	movs	r3, #34	; 0x22
 80044ca:	f8c8 3000 	str.w	r3, [r8]
 80044ce:	4608      	mov	r0, r1
 80044d0:	f1ba 0f00 	cmp.w	sl, #0
 80044d4:	d107      	bne.n	80044e6 <_strtol_l.isra.0+0xda>
 80044d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044da:	b102      	cbz	r2, 80044de <_strtol_l.isra.0+0xd2>
 80044dc:	4240      	negs	r0, r0
 80044de:	f1ba 0f00 	cmp.w	sl, #0
 80044e2:	d0f8      	beq.n	80044d6 <_strtol_l.isra.0+0xca>
 80044e4:	b10f      	cbz	r7, 80044ea <_strtol_l.isra.0+0xde>
 80044e6:	f105 39ff 	add.w	r9, r5, #4294967295
 80044ea:	f8ca 9000 	str.w	r9, [sl]
 80044ee:	e7f2      	b.n	80044d6 <_strtol_l.isra.0+0xca>
 80044f0:	2430      	movs	r4, #48	; 0x30
 80044f2:	2e00      	cmp	r6, #0
 80044f4:	d1af      	bne.n	8004456 <_strtol_l.isra.0+0x4a>
 80044f6:	2608      	movs	r6, #8
 80044f8:	e7ad      	b.n	8004456 <_strtol_l.isra.0+0x4a>
 80044fa:	2c30      	cmp	r4, #48	; 0x30
 80044fc:	d0a3      	beq.n	8004446 <_strtol_l.isra.0+0x3a>
 80044fe:	260a      	movs	r6, #10
 8004500:	e7a9      	b.n	8004456 <_strtol_l.isra.0+0x4a>
	...

08004504 <strtol>:
 8004504:	4b08      	ldr	r3, [pc, #32]	; (8004528 <strtol+0x24>)
 8004506:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004508:	681c      	ldr	r4, [r3, #0]
 800450a:	4d08      	ldr	r5, [pc, #32]	; (800452c <strtol+0x28>)
 800450c:	6a23      	ldr	r3, [r4, #32]
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf08      	it	eq
 8004512:	462b      	moveq	r3, r5
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	4613      	mov	r3, r2
 8004518:	460a      	mov	r2, r1
 800451a:	4601      	mov	r1, r0
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff ff75 	bl	800440c <_strtol_l.isra.0>
 8004522:	b003      	add	sp, #12
 8004524:	bd30      	pop	{r4, r5, pc}
 8004526:	bf00      	nop
 8004528:	20000014 	.word	0x20000014
 800452c:	20000078 	.word	0x20000078

08004530 <__locale_ctype_ptr_l>:
 8004530:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004534:	4770      	bx	lr

08004536 <__ascii_mbtowc>:
 8004536:	b082      	sub	sp, #8
 8004538:	b901      	cbnz	r1, 800453c <__ascii_mbtowc+0x6>
 800453a:	a901      	add	r1, sp, #4
 800453c:	b142      	cbz	r2, 8004550 <__ascii_mbtowc+0x1a>
 800453e:	b14b      	cbz	r3, 8004554 <__ascii_mbtowc+0x1e>
 8004540:	7813      	ldrb	r3, [r2, #0]
 8004542:	600b      	str	r3, [r1, #0]
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	1c10      	adds	r0, r2, #0
 8004548:	bf18      	it	ne
 800454a:	2001      	movne	r0, #1
 800454c:	b002      	add	sp, #8
 800454e:	4770      	bx	lr
 8004550:	4610      	mov	r0, r2
 8004552:	e7fb      	b.n	800454c <__ascii_mbtowc+0x16>
 8004554:	f06f 0001 	mvn.w	r0, #1
 8004558:	e7f8      	b.n	800454c <__ascii_mbtowc+0x16>

0800455a <__malloc_lock>:
 800455a:	4770      	bx	lr

0800455c <__malloc_unlock>:
 800455c:	4770      	bx	lr

0800455e <__ascii_wctomb>:
 800455e:	b149      	cbz	r1, 8004574 <__ascii_wctomb+0x16>
 8004560:	2aff      	cmp	r2, #255	; 0xff
 8004562:	bf85      	ittet	hi
 8004564:	238a      	movhi	r3, #138	; 0x8a
 8004566:	6003      	strhi	r3, [r0, #0]
 8004568:	700a      	strbls	r2, [r1, #0]
 800456a:	f04f 30ff 	movhi.w	r0, #4294967295
 800456e:	bf98      	it	ls
 8004570:	2001      	movls	r0, #1
 8004572:	4770      	bx	lr
 8004574:	4608      	mov	r0, r1
 8004576:	4770      	bx	lr

08004578 <_init>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr

08004584 <_fini>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr
